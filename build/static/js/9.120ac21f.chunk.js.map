{"version":3,"sources":["actions/authenticated.action.js","actions/index.js","views/Login/Login.js","views/Login/index.js"],"names":["login","email","password","history","dispatch","callAPI","then","res","type","LOGIN","payload","data","setAuthToken","accessToken","setToken","push","catch","err","GET_ERRORS","response","getInfo","a","getAccessToken","GET_INFO","removeToken","SignIn","Form","create","name","props","auth","errors","getFieldDecorator","form","useState","iconLoading","setIconLoading","notice","setNotice","useEffect","message","validate","rule","value","callback","validateFields","force","justify","align","style","minHeight","lg","md","sm","xs","onSubmit","e","preventDefault","values","className","color","id","Item","hasFeedback","rules","formatMessage","required","validator","allowClear","prefix","placeholder","min","Password","htmlType","icon","loading","shape","size","href","connect","state"],"mappings":"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","file":"static/js/9.120ac21f.chunk.js","sourcesContent":["import { LOGIN, GET_INFO, GET_ERRORS } from '../constants/types';\r\nimport { setAuthToken, setToken, removeToken } from './../config';\r\nimport { callAPI, getAccessToken } from '../common';\r\n\r\nexport const login = (email, password, history) => dispatch => {\r\n    callAPI('/auth/login', 'POST', { email, password })\r\n        .then(res => {\r\n            dispatch({\r\n                type: LOGIN,\r\n                payload: res.data\r\n            });\r\n            setAuthToken(res.data.accessToken);\r\n            setToken(res.data);\r\n            history.push('/');\r\n        })\r\n        .catch(err => {\r\n            dispatch({\r\n                type: GET_ERRORS,\r\n                payload: err.response.data\r\n            });\r\n        });\r\n};\r\n\r\nexport const getInfo = history => async dispatch => {\r\n    const result = await getAccessToken(history);\r\n    if (result) {\r\n        callAPI('/user/greet-me-protected?name=aonguyen')\r\n            .then(res => {\r\n                dispatch({\r\n                    type: GET_INFO,\r\n                    payload: res.data\r\n                });\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type: GET_ERRORS,\r\n                    payload: err.response.data\r\n                });\r\n                removeToken();\r\n                history.push('/not-authenticated');\r\n            });\r\n    }\r\n};\r\n","export { login, getInfo } from './authenticated.action';","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { GridContent } from '@ant-design/pro-layout';\r\nimport { Divider, Row, Col, Icon, Button, Form, Input } from 'antd';\r\nimport { formatMessage, FormattedMessage } from 'umi-plugin-react/locale';\r\n\r\nimport { login } from './../../actions';\r\nimport { AlertErrors } from './../../components';\r\nimport './styles.css';\r\n\r\nfunction LoginForm(props) {\r\n    const { auth, login, errors, history } = props;\r\n    const { getFieldDecorator } = props.form;\r\n\r\n    const [iconLoading, setIconLoading] = useState(false);\r\n    const [notice, setNotice] = useState('');\r\n\r\n    useEffect(() => {\r\n        setNotice(errors.message);\r\n    }, [errors]);\r\n    useEffect(() => {\r\n        setIconLoading(false);\r\n    }, [auth, errors]);\r\n    useEffect(() => {\r\n        setNotice('');\r\n    }, [auth]);\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        setNotice('');\r\n        props.form.validateFields((err, values) => {\r\n            if (!err) {   \r\n                setIconLoading(true);\r\n                login(values.email, values.password, history);\r\n            }\r\n        });\r\n    };\r\n    const validate = (rule, value, callback) => {\r\n        const { form } = props;\r\n        if (value) {\r\n            form.validateFields(['confirm'], { force: true });\r\n        }\r\n        callback();\r\n    };\r\n\r\n    return (\r\n        <GridContent>\r\n            <Row\r\n                type=\"flex\"\r\n                justify=\"center\"\r\n                align=\"middle\"\r\n                style={{ minHeight: '100vh' }}\r\n            >\r\n                <Col lg={7} md={10} sm={15} xs={20}>\r\n                    <Form onSubmit={handleSubmit} className=\"login-form\">\r\n                        <Divider>\r\n                            <Icon\r\n                                className='icon-login'\r\n                                type=\"login\"\r\n                            />\r\n                            <span style={{ color: '#08c' }}><FormattedMessage id='login.login' /></span>\r\n                        </Divider>\r\n                        {notice && <AlertErrors message={notice} type=\"error\" />}\r\n                        <Form.Item hasFeedback>\r\n                            {getFieldDecorator('email', {\r\n                                rules: [\r\n                                    {\r\n                                        type: 'email',\r\n                                        message: formatMessage({id: 'login.validEmail'})\r\n                                    },\r\n                                    {\r\n                                        required: true,\r\n                                        message: formatMessage({id: 'login.requiredEmail'})\r\n                                    },\r\n                                    {\r\n                                        validator: validate\r\n                                    }\r\n                                ]\r\n                            })(\r\n                                <Input\r\n                                    allowClear\r\n                                    prefix={\r\n                                        <Icon\r\n                                            type=\"user\"\r\n                                            style={{ color: 'rgba(0,0,0,.25)' }}\r\n                                        />\r\n                                    }\r\n                                    placeholder={formatMessage({id: 'login.email'})}\r\n                                />\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item hasFeedback>\r\n                            {getFieldDecorator('password', {\r\n                                rules: [\r\n                                    {\r\n                                        required: true,\r\n                                        message: formatMessage({id: 'login.requiredPassword'})\r\n                                    },\r\n                                    {\r\n                                        validator: validate\r\n                                    },\r\n                                    {\r\n                                        min: 6,\r\n                                        message: formatMessage({id: 'login.lengPassword'})\r\n                                    }\r\n                                ]\r\n                            })(\r\n                                <Input.Password\r\n                                    prefix={\r\n                                        <Icon\r\n                                            type=\"lock\"\r\n                                            style={{ color: 'rgba(0,0,0,.25)' }}\r\n                                        />\r\n                                    }\r\n                                    allowClear\r\n                                    type=\"password\"\r\n                                    placeholder={formatMessage({id: 'login.password'})}\r\n                                />\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                className=\"login-form-button\"\r\n                                icon=\"login\"\r\n                                loading={iconLoading}\r\n                            >\r\n                                <FormattedMessage id='login.login' />\r\n                            </Button>\r\n                            <div>\r\n                                <FormattedMessage id='login.loginMethod' />\r\n                                <Button\r\n                                    className=\"btn-google\"\r\n                                    type=\"dashed\"\r\n                                    shape=\"circle\"\r\n                                    icon=\"google\"\r\n                                    size=\"default\"\r\n                                />\r\n                                <Button\r\n                                    type=\"dashed\"\r\n                                    shape=\"circle\"\r\n                                    icon=\"facebook\"\r\n                                    size=\"default\"\r\n                                />\r\n                                <Button\r\n                                    className=\"btn-register\"\r\n                                    type=\"link\"\r\n                                    href=\"foo\"\r\n                                >\r\n                                    <FormattedMessage id='login.register' />\r\n                                </Button>\r\n                            </div>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        </GridContent>\r\n    );\r\n}\r\nconst SignIn = Form.create({ name: 'login' })(LoginForm);\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    errors: state.errors\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { login }\r\n)(SignIn);\r\n","export { default } from './Login';"],"sourceRoot":""}