{"ast":null,"code":"var _jsxFileName = \"E:\\\\web_ungdung\\\\frontend\\\\src\\\\components\\\\NoticeView\\\\NoticeIcon\\\\NoticeIcon.js\";\nimport React from 'react';\nimport { BellOutlined } from '@ant-design/icons';\nimport { Badge, Spin, Tabs } from 'antd';\nimport useMergeValue from 'use-merge-value';\nimport NoticeList from './../NoticeList';\nimport HeaderDropdown from './../../HeaderDropdown';\nimport './styles.css';\nconst {\n  TabPane\n} = Tabs;\n\nconst NoticeIcon = props => {\n  const getNotificationBox = () => {\n    const {\n      children,\n      loading,\n      onClear,\n      onTabChange,\n      onItemClick,\n      onViewMore,\n      clearText,\n      viewMoreText\n    } = props;\n\n    if (!children) {\n      return null;\n    }\n\n    const panes = [];\n    React.Children.forEach(children, child => {\n      console.log(children);\n\n      if (!child) {\n        return;\n      }\n\n      const {\n        list,\n        title,\n        count,\n        tabKey,\n        showClear,\n        showViewMore\n      } = child.props;\n      const len = list && list.length ? list.length : 0;\n      const msgCount = count || count === 0 ? count : len;\n      const tabTitle = msgCount > 0 ? `${title} (${msgCount})` : title;\n      panes.push(React.createElement(TabPane, {\n        tab: tabTitle,\n        key: tabKey,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(NoticeList //clearText={clearText}\n      //viewMoreText={viewMoreText}\n      //data={list}\n      //onClear={() => onClear && onClear(title, tabKey)}\n      , Object.assign({\n        onClick: item => onItemClick && onItemClick(item, child.props),\n        onViewMore: event => onViewMore && onViewMore(child.props, event) //showClear={showClear}\n        //showViewMore={showViewMore}\n        ,\n        title: title\n      }, child.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }))));\n    });\n    return React.createElement(Spin, {\n      spinning: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Tabs, {\n      onChange: onTabChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, panes));\n  };\n\n  const {\n    count,\n    bell\n  } = props;\n  const [visible, setVisible] = useMergeValue(false, {\n    value: props.popupVisible,\n    onChange: props.onPopupVisibleChange\n  });\n  const notificationBox = getNotificationBox();\n  const NoticeBellIcon = bell || React.createElement(BellOutlined, {\n    className: \"icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  });\n  const trigger = React.createElement(\"span\", {\n    className: \"noticeButton\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(Badge, {\n    count: count,\n    style: {\n      boxShadow: 'none',\n      fontSize: '20px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, NoticeBellIcon));\n\n  if (!notificationBox) {\n    return trigger;\n  }\n\n  return React.createElement(HeaderDropdown, {\n    placement: \"bottomRight\",\n    overlay: notificationBox,\n    overlayClassName: \"popover\",\n    trigger: ['click'],\n    visible: visible,\n    onVisibleChange: setVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, trigger);\n};\n\nNoticeIcon.defaultProps = {\n  emptyImage: 'https://gw.alipayobjects.com/zos/rmsportal/wAhyIChODzsoKIOBHcBk.svg'\n};\nNoticeIcon.Tab = NoticeList;\nexport default NoticeIcon;","map":{"version":3,"sources":["E:/web_ungdung/frontend/src/components/NoticeView/NoticeIcon/NoticeIcon.js"],"names":["React","BellOutlined","Badge","Spin","Tabs","useMergeValue","NoticeList","HeaderDropdown","TabPane","NoticeIcon","props","getNotificationBox","children","loading","onClear","onTabChange","onItemClick","onViewMore","clearText","viewMoreText","panes","Children","forEach","child","console","log","list","title","count","tabKey","showClear","showViewMore","len","length","msgCount","tabTitle","push","item","event","bell","visible","setVisible","value","popupVisible","onChange","onPopupVisibleChange","notificationBox","NoticeBellIcon","trigger","boxShadow","fontSize","defaultProps","emptyImage","Tab"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { BellOutlined } from '@ant-design/icons';\r\nimport { Badge, Spin, Tabs } from 'antd';\r\nimport useMergeValue from 'use-merge-value';\r\nimport NoticeList from './../NoticeList';\r\nimport HeaderDropdown from './../../HeaderDropdown';\r\nimport './styles.css';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nconst NoticeIcon = (props) => {\r\n    const getNotificationBox = () => {\r\n        const {\r\n            children,\r\n            loading,\r\n            onClear,\r\n            onTabChange,\r\n            onItemClick,\r\n            onViewMore,\r\n            clearText,\r\n            viewMoreText\r\n        } = props;\r\n\r\n        if (!children) {\r\n            return null;\r\n        }\r\n\r\n        const panes = [];\r\n        React.Children.forEach(children, child => {\r\n            console.log(children)\r\n            if (!child) {\r\n                return;\r\n            }\r\n\r\n            const {\r\n                list,\r\n                title,\r\n                count,\r\n                tabKey,\r\n                showClear,\r\n                showViewMore\r\n            } = child.props;\r\n            \r\n            const len = list && list.length ? list.length : 0;\r\n            const msgCount = count || count === 0 ? count : len;\r\n            const tabTitle = msgCount > 0 ? `${title} (${msgCount})` : title;\r\n            panes.push(\r\n                <TabPane tab={tabTitle} key={tabKey}>\r\n                    <NoticeList\r\n                        //clearText={clearText}\r\n                        //viewMoreText={viewMoreText}\r\n                        //data={list}\r\n                        //onClear={() => onClear && onClear(title, tabKey)}\r\n                        onClick={item =>\r\n                            onItemClick && onItemClick(item, child.props)\r\n                        }\r\n                        onViewMore={event =>\r\n                            onViewMore && onViewMore(child.props, event)\r\n                        }\r\n                        //showClear={showClear}\r\n                        //showViewMore={showViewMore}\r\n                        title={title}\r\n                        {...child.props}\r\n                    />\r\n                </TabPane>\r\n            );\r\n        });\r\n        return (\r\n            <Spin spinning={loading}>\r\n                <Tabs onChange={onTabChange}>\r\n                    {panes}\r\n                </Tabs>\r\n            </Spin>\r\n        );\r\n    };\r\n\r\n    const { count, bell } = props;\r\n    const [visible, setVisible] = useMergeValue(false, {\r\n        value: props.popupVisible,\r\n        onChange: props.onPopupVisibleChange\r\n    });\r\n    const notificationBox = getNotificationBox();\r\n\r\n    const NoticeBellIcon = bell || <BellOutlined className='icon' />;\r\n\r\n    const trigger = (\r\n        <span\r\n            className='noticeButton'\r\n        >\r\n            <Badge\r\n                count={count}\r\n                style={{\r\n                    boxShadow: 'none',\r\n                    fontSize: '20px',\r\n                }}\r\n            >\r\n                {NoticeBellIcon}\r\n            </Badge>\r\n        </span>\r\n    );\r\n\r\n    if (!notificationBox) {\r\n        return trigger;\r\n    }\r\n\r\n    return (\r\n        <HeaderDropdown\r\n            placement=\"bottomRight\"\r\n            overlay={notificationBox}\r\n            overlayClassName='popover'\r\n            trigger={['click']}\r\n            visible={visible}\r\n            onVisibleChange={setVisible}\r\n        >\r\n            {trigger}\r\n        </HeaderDropdown>\r\n    );\r\n}\r\nNoticeIcon.defaultProps = {\r\n    emptyImage:\r\n        'https://gw.alipayobjects.com/zos/rmsportal/wAhyIChODzsoKIOBHcBk.svg'\r\n};\r\nNoticeIcon.Tab = NoticeList;\r\n\r\nexport default NoticeIcon;"]},"metadata":{},"sourceType":"module"}