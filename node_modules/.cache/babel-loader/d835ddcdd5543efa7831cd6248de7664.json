{"ast":null,"code":"import \"antd/es/config-provider/style\";\nimport _ConfigProvider from \"antd/es/config-provider\";\nimport \"antd/es/layout/style\";\nimport _Layout from \"antd/es/layout\";\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport React from 'react';\nimport ResizeObserver from 'rc-resize-observer';\nimport { debounce } from './utils/utils';\nvar Content = _Layout.Content;\n\nvar WrapContent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(WrapContent, _React$Component);\n\n  function WrapContent() {\n    var _this;\n\n    _classCallCheck(this, WrapContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WrapContent).apply(this, arguments));\n    _this.state = {\n      contentSize: 'auto'\n    };\n    _this.ref = null;\n    _this.resize = debounce(function (_ref) {\n      var height = _ref.height;\n      var contentSize = _this.state.contentSize;\n\n      if (height !== contentSize) {\n        _this.setState({\n          contentSize: height\n        });\n      }\n    }, 100);\n    return _this;\n  }\n\n  _createClass(WrapContent, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(_, nextState) {\n      if (nextState.contentSize !== this.state.contentSize) {\n        return true;\n      }\n\n      if (_.children !== this.props.children) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var contentSize = this.state.contentSize;\n      var _this$props = this.props,\n          style = _this$props.style,\n          className = _this$props.className,\n          children = _this$props.children,\n          isChildrenLayout = _this$props.isChildrenLayout;\n      return React.createElement(\"div\", {\n        style: {\n          minHeight: contentSize\n        }\n      }, React.createElement(Content, {\n        className: className,\n        style: Object.assign({}, style)\n      }, React.createElement(ResizeObserver, {\n        onResize: this.resize\n      }, React.createElement(_ConfigProvider, {\n        getPopupContainer: function getPopupContainer() {\n          if (isChildrenLayout && _this2.ref) {\n            return _this2.ref;\n          }\n\n          return document.body;\n        }\n      }, React.createElement(\"div\", {\n        ref: function ref(ele) {\n          _this2.ref = ele;\n        },\n        className: \"ant-pro-basicLayout-children-content-wrap\"\n      }, children)))));\n    }\n  }]);\n\n  return WrapContent;\n}(React.Component);\n\nexport default WrapContent;","map":null,"metadata":{},"sourceType":"module"}