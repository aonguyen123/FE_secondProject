{"ast":null,"code":"var _jsxFileName = \"E:\\\\web_ungdung\\\\frontend\\\\src\\\\views\\\\.umi\\\\LocaleWrapper.js\";\nimport React from 'react';\nimport { _setIntlObject, addLocaleData, IntlProvider, intlShape, LangContext, _setLocaleContext } from 'umi-plugin-locale/lib/locale';\n\nconst InjectedWrapper = (() => {\n  let sfc = (props, context) => {\n    _setIntlObject(context.intl);\n\n    return props.children;\n  };\n\n  sfc.contextTypes = {\n    intl: intlShape\n  };\n  return sfc;\n})();\n\nimport 'moment/locale/vi';\nconst baseSeparator = '-';\nconst useLocalStorage = true;\nimport { LocaleProvider, version } from 'antd';\nimport 'moment/locale/vi';\n\nlet defaultAntd = require('antd/lib/locale-provider/en_US');\n\ndefaultAntd = defaultAntd.default || defaultAntd;\nconst localeInfo = {\n  'en-US': {\n    messages: { ...(locale => locale.__esModule ? locale.default : locale)(require('./../../locales/en-US')),\n      ...(locale => locale.__esModule ? locale.default : locale)(require('./../Login/locales/en-US'))\n    },\n    locale: 'en-US',\n    antd: require('antd/lib/locale-provider/en_US'),\n    data: require('@formatjs/intl-pluralrules/dist/locale-data/en'),\n    momentLocale: 'en-us'\n  },\n  'vi-VN': {\n    messages: { ...(locale => locale.__esModule ? locale.default : locale)(require('./../../locales/vi-VN')),\n      ...(locale => locale.__esModule ? locale.default : locale)(require('./../Login/locales/vi-VN'))\n    },\n    locale: 'en',\n    antd: require('antd/lib/locale-provider/vi_VN'),\n    data: require('@formatjs/intl-pluralrules/dist/locale-data/vi'),\n    momentLocale: 'vi-vn'\n  }\n};\n\nclass LocaleWrapper extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      locale: 'en'\n    };\n\n    this.reloadAppLocale = () => {\n      const appLocale = this.getAppLocale();\n      this.setState({\n        locale: appLocale.locale\n      });\n    };\n  }\n\n  getAppLocale() {\n    let appLocale = {\n      locale: 'en-US',\n      messages: {},\n      data: require('@formatjs/intl-pluralrules/dist/locale-data/en'),\n      momentLocale: 'en-us'\n    };\n\n    if (useLocalStorage && typeof localStorage !== 'undefined' && localStorage.getItem('umi_locale') && localeInfo[localStorage.getItem('umi_locale')]) {\n      appLocale = localeInfo[localStorage.getItem('umi_locale')];\n    } else {\n      appLocale = localeInfo['en-US'] || appLocale;\n    }\n\n    window.g_lang = appLocale.locale;\n    window.g_langSeparator = baseSeparator || '-';\n    appLocale.data && addLocaleData(appLocale.data);\n    return appLocale;\n  }\n\n  render() {\n    const appLocale = this.getAppLocale(); // react-intl must use `-` separator\n\n    const reactIntlLocale = appLocale.locale.split(baseSeparator).join('-');\n    const LangContextValue = {\n      locale: reactIntlLocale,\n      reloadAppLocale: this.reloadAppLocale\n    };\n    let ret = this.props.children;\n    ret = React.createElement(IntlProvider, {\n      locale: reactIntlLocale,\n      messages: appLocale.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(InjectedWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(LangContext.Provider, {\n      value: LangContextValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(LangContext.Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, value => {\n      _setLocaleContext(value);\n\n      return this.props.children;\n    })))); // avoid antd ConfigProvider not found\n\n    let AntdProvider = LocaleProvider;\n    const [major, minor] = `${version || ''}`.split('.'); // antd 3.21.0 use ConfigProvider not LocaleProvider\n\n    const isConfigProvider = Number(major) > 3 || Number(major) >= 3 && Number(minor) >= 21;\n\n    if (isConfigProvider) {\n      try {\n        AntdProvider = require('antd/lib/config-provider').default;\n      } catch (e) {}\n    }\n\n    return React.createElement(AntdProvider, {\n      locale: appLocale.antd ? appLocale.antd.default || appLocale.antd : defaultAntd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, ret);\n    return ret;\n  }\n\n}\n\nexport default LocaleWrapper;","map":{"version":3,"sources":["E:/web_ungdung/frontend/src/views/.umi/LocaleWrapper.js"],"names":["React","_setIntlObject","addLocaleData","IntlProvider","intlShape","LangContext","_setLocaleContext","InjectedWrapper","sfc","props","context","intl","children","contextTypes","baseSeparator","useLocalStorage","LocaleProvider","version","defaultAntd","require","default","localeInfo","messages","locale","__esModule","antd","data","momentLocale","LocaleWrapper","Component","state","reloadAppLocale","appLocale","getAppLocale","setState","localStorage","getItem","window","g_lang","g_langSeparator","render","reactIntlLocale","split","join","LangContextValue","ret","value","AntdProvider","major","minor","isConfigProvider","Number","e"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n    _setIntlObject,\r\n    addLocaleData,\r\n    IntlProvider,\r\n    intlShape,\r\n    LangContext,\r\n    _setLocaleContext\r\n} from 'umi-plugin-locale/lib/locale';\r\n\r\nconst InjectedWrapper = (() => {\r\n    let sfc = (props, context) => {\r\n        _setIntlObject(context.intl);\r\n        return props.children;\r\n    };\r\n    sfc.contextTypes = {\r\n        intl: intlShape\r\n    };\r\n    return sfc;\r\n})();\r\n\r\nimport 'moment/locale/vi';\r\n\r\nconst baseSeparator = '-';\r\nconst useLocalStorage = true;\r\n\r\nimport { LocaleProvider, version } from 'antd';\r\nimport 'moment/locale/vi';\r\n\r\nlet defaultAntd = require('antd/lib/locale-provider/en_US');\r\ndefaultAntd = defaultAntd.default || defaultAntd;\r\n\r\nconst localeInfo = {\r\n    'en-US': {\r\n        messages: {\r\n            ...(locale => (locale.__esModule ? locale.default : locale))(\r\n                require('./../../locales/en-US')\r\n            ),\r\n            ...(locale => (locale.__esModule ? locale.default : locale))(\r\n                require('./../Login/locales/en-US')\r\n            ),\r\n        },\r\n        locale: 'en-US',\r\n        antd: require('antd/lib/locale-provider/en_US'),\r\n        data: require('@formatjs/intl-pluralrules/dist/locale-data/en'),\r\n        momentLocale: 'en-us'\r\n    },\r\n    'vi-VN': {\r\n        messages: {\r\n            ...(locale => (locale.__esModule ? locale.default : locale))(\r\n                require('./../../locales/vi-VN')\r\n            ),\r\n            ...(locale => (locale.__esModule ? locale.default : locale))(\r\n                require('./../Login/locales/vi-VN')\r\n            ),\r\n        },\r\n        locale: 'en',\r\n        antd: require('antd/lib/locale-provider/vi_VN'),\r\n        data: require('@formatjs/intl-pluralrules/dist/locale-data/vi'),\r\n        momentLocale: 'vi-vn'\r\n    },\r\n};\r\n\r\nclass LocaleWrapper extends React.Component {\r\n    state = {\r\n        locale: 'en'\r\n    };\r\n    getAppLocale() {\r\n        let appLocale = {\r\n            locale: 'en-US',\r\n            messages: {},\r\n            data: require('@formatjs/intl-pluralrules/dist/locale-data/en'),\r\n            momentLocale: 'en-us'\r\n        };\r\n  \r\n        if (\r\n            useLocalStorage &&\r\n            typeof localStorage !== 'undefined' &&\r\n            localStorage.getItem('umi_locale') &&\r\n            localeInfo[localStorage.getItem('umi_locale')]\r\n        ) {\r\n            appLocale = localeInfo[localStorage.getItem('umi_locale')];\r\n        } else {\r\n            appLocale = localeInfo['en-US'] || appLocale;\r\n        }\r\n        window.g_lang = appLocale.locale;\r\n        window.g_langSeparator = baseSeparator || '-';\r\n        appLocale.data && addLocaleData(appLocale.data);\r\n\r\n        return appLocale;\r\n    }\r\n    reloadAppLocale = () => {\r\n        const appLocale = this.getAppLocale();\r\n        this.setState({\r\n            locale: appLocale.locale\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const appLocale = this.getAppLocale();\r\n        // react-intl must use `-` separator\r\n        const reactIntlLocale = appLocale.locale.split(baseSeparator).join('-');\r\n        const LangContextValue = {\r\n            locale: reactIntlLocale,\r\n            reloadAppLocale: this.reloadAppLocale\r\n        };\r\n        let ret = this.props.children;\r\n        ret = (\r\n            <IntlProvider\r\n                locale={reactIntlLocale}\r\n                messages={appLocale.messages}\r\n            >\r\n                <InjectedWrapper>\r\n                    <LangContext.Provider value={LangContextValue}>\r\n                        <LangContext.Consumer>\r\n                            {value => {\r\n                                _setLocaleContext(value);\r\n                                return this.props.children;\r\n                            }}\r\n                        </LangContext.Consumer>\r\n                    </LangContext.Provider>\r\n                </InjectedWrapper>\r\n            </IntlProvider>\r\n        );\r\n        // avoid antd ConfigProvider not found\r\n        let AntdProvider = LocaleProvider;\r\n        const [major, minor] = `${version || ''}`.split('.');\r\n        // antd 3.21.0 use ConfigProvider not LocaleProvider\r\n        const isConfigProvider =\r\n            Number(major) > 3 || (Number(major) >= 3 && Number(minor) >= 21);\r\n        if (isConfigProvider) {\r\n            try {\r\n                AntdProvider = require('antd/lib/config-provider').default;\r\n            } catch (e) {}\r\n        }\r\n\r\n        return (\r\n            <AntdProvider\r\n                locale={\r\n                    appLocale.antd\r\n                        ? appLocale.antd.default || appLocale.antd\r\n                        : defaultAntd\r\n                }\r\n            >\r\n                {ret}\r\n            </AntdProvider>\r\n        );\r\n        return ret;\r\n    }\r\n}\r\nexport default LocaleWrapper;\r\n"]},"metadata":{},"sourceType":"module"}