{"ast":null,"code":"var _jsxFileName = \"E:\\\\react-antd\\\\frontend\\\\src\\\\views\\\\Setting\\\\components\\\\GeographicView\\\\GeographicView.js\";\nimport React, { forwardRef, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Spin, Select, Row, Col } from 'antd';\nimport allActions from './../../../../actions';\nimport './styles.css';\nconst {\n  Option\n} = Select;\nconst nullSelectItem = {\n  label: '',\n  key: ''\n};\nconst GeographicView = forwardRef((props, ref) => {\n  const dispatch = useDispatch();\n  const provinces = useSelector(state => state.provincesReducer.provinces);\n  const districts = useSelector(state => state.provincesReducer.districts);\n  const loading = useSelector(state => state.provincesReducer.loadingProvince);\n  useEffect(() => {\n    dispatch(allActions.geocodeActions.getProvinces());\n  }, [dispatch]);\n\n  const conversionObject = () => {\n    const {\n      value\n    } = props;\n\n    if (!value) {\n      return {\n        province: nullSelectItem,\n        district: nullSelectItem\n      };\n    }\n\n    const {\n      province,\n      district\n    } = value;\n    return {\n      province: province || nullSelectItem,\n      district: district || nullSelectItem\n    };\n  };\n\n  const getProvinceOption = provinces => {\n    console.log(provinces);\n\n    if (provinces.length !== 0) {\n      return getOption(provinces);\n    }\n\n    return [];\n  };\n\n  const getDistrictOption = () => {\n    if (districts.length !== 0) {\n      return getOption(districts);\n    }\n\n    return [];\n  };\n\n  const selectProvinceItem = item => {\n    const {\n      onChange\n    } = props;\n    dispatch(allActions.geocodeActions.getDistricts(item.key));\n\n    if (onChange) {\n      onChange({\n        province: item,\n        district: nullSelectItem\n      });\n    }\n  };\n\n  const selectDistrictItem = item => {\n    const {\n      value,\n      onChange\n    } = props;\n\n    if (value && onChange) {\n      onChange({\n        province: value.province,\n        district: item\n      });\n    }\n  };\n\n  const getOption = list => {\n    return list.map(item => React.createElement(Option, {\n      key: item.id,\n      value: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, item.name));\n  };\n\n  const onSearch = val => {\n    const result = provinces.filter(provin => provin.name.toLowerCase().includes(val));\n    getProvinceOption(result);\n  };\n\n  const {\n    province,\n    district\n  } = conversionObject();\n  return React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(Col, {\n    xl: 24,\n    lg: 24,\n    md: 24,\n    sm: 24,\n    xs: 24,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(Spin, {\n    spinning: loading,\n    wrapperClassName: \"row\",\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(Select, {\n    className: \"item\",\n    showSearch: true,\n    onSelect: selectProvinceItem,\n    loading: provinces.length !== 0 ? false : true,\n    labelInValue: true,\n    value: province,\n    onSearch: onSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, getProvinceOption(provinces)), React.createElement(Select, {\n    className: \"item\",\n    showSearch: true,\n    labelInValue: true,\n    value: district,\n    onSelect: selectDistrictItem,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, getDistrictOption()))));\n});\nexport default GeographicView;","map":{"version":3,"sources":["E:/react-antd/frontend/src/views/Setting/components/GeographicView/GeographicView.js"],"names":["React","forwardRef","useState","useEffect","useSelector","useDispatch","Spin","Select","Row","Col","allActions","Option","nullSelectItem","label","key","GeographicView","props","ref","dispatch","provinces","state","provincesReducer","districts","loading","loadingProvince","geocodeActions","getProvinces","conversionObject","value","province","district","getProvinceOption","console","log","length","getOption","getDistrictOption","selectProvinceItem","item","onChange","getDistricts","selectDistrictItem","list","map","id","name","onSearch","val","result","filter","provin","toLowerCase","includes"],"mappings":"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","sourcesContent":["import React, { forwardRef, useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Spin, Select, Row, Col } from 'antd';\r\nimport allActions from './../../../../actions';\r\nimport './styles.css';\r\nconst { Option } = Select;\r\nconst nullSelectItem = {\r\n    label: '',\r\n    key: ''\r\n};\r\n\r\nconst GeographicView = forwardRef((props, ref) => {\r\n    const dispatch = useDispatch();\r\n    const provinces = useSelector(state => state.provincesReducer.provinces);\r\n    const districts = useSelector(state => state.provincesReducer.districts);\r\n    const loading = useSelector(\r\n        state => state.provincesReducer.loadingProvince\r\n    );\r\n\r\n    useEffect(() => {\r\n        dispatch(allActions.geocodeActions.getProvinces());\r\n    }, [dispatch]);\r\n\r\n    const conversionObject = () => {\r\n        const { value } = props;\r\n        if (!value) {\r\n            return {\r\n                province: nullSelectItem,\r\n                district: nullSelectItem\r\n            };\r\n        }\r\n        const { province, district } = value;\r\n        return {\r\n            province: province || nullSelectItem,\r\n            district: district || nullSelectItem\r\n        };\r\n    };\r\n\r\n    const getProvinceOption = (provinces) => {\r\n        console.log(provinces)\r\n        if (provinces.length !== 0) {\r\n            return getOption(provinces);\r\n        }\r\n        return [];\r\n    };\r\n    const getDistrictOption = () => {\r\n        if (districts.length !== 0) {\r\n            return getOption(districts);\r\n        }\r\n        return [];\r\n    };\r\n    const selectProvinceItem = item => {\r\n        const { onChange } = props;\r\n\r\n        dispatch(allActions.geocodeActions.getDistricts(item.key));\r\n        if (onChange) {\r\n            onChange({\r\n                province: item,\r\n                district: nullSelectItem\r\n            });\r\n        }\r\n    };\r\n    const selectDistrictItem = item => {\r\n        const { value, onChange } = props;\r\n\r\n        if (value && onChange) {\r\n            onChange({\r\n                province: value.province,\r\n                district: item\r\n            });\r\n        }\r\n    };\r\n    const getOption = list => {\r\n        return list.map(item => (\r\n            <Option key={item.id} value={item.id}>\r\n                {item.name}\r\n            </Option>\r\n        ));\r\n    };\r\n    const onSearch = val => {\r\n        const result = provinces.filter(provin => provin.name.toLowerCase().includes(val));\r\n        getProvinceOption(result);\r\n    };\r\n    const { province, district } = conversionObject();\r\n    return (\r\n        <Row>\r\n            <Col xl={24} lg={24} md={24} sm={24} xs={24}>\r\n                <Spin spinning={loading} wrapperClassName=\"row\" size=\"small\">\r\n                    <Select\r\n                        className=\"item\"\r\n                        showSearch\r\n                        onSelect={selectProvinceItem}\r\n                        loading={provinces.length !== 0 ? false : true}\r\n                        labelInValue\r\n                        value={province}\r\n                        onSearch={onSearch}\r\n                    >\r\n                        {getProvinceOption(provinces)}\r\n                    </Select>\r\n                    <Select\r\n                        className=\"item\"\r\n                        showSearch\r\n                        labelInValue\r\n                        value={district}\r\n                        onSelect={selectDistrictItem}\r\n                    >\r\n                        {getDistrictOption()}\r\n                    </Select>\r\n                </Spin>\r\n            </Col>\r\n        </Row>\r\n    );\r\n});\r\n\r\nexport default GeographicView;\r\n"]},"metadata":{},"sourceType":"module"}