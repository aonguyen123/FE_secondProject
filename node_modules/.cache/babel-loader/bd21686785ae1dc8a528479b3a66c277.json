{"ast":null,"code":"var _jsxFileName = \"E:\\\\react-antd\\\\frontend\\\\src\\\\views\\\\Login\\\\Login.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GridContent } from '@ant-design/pro-layout';\nimport { Divider, Row, Col, Icon, Button, Form, Input } from 'antd';\nimport { formatMessage, FormattedMessage } from 'umi-plugin-react/locale';\nimport allActions from './../../actions';\nimport { AlertErrors } from './../../components';\nimport './styles.css';\n\nfunction LoginForm(props) {\n  const {\n    history\n  } = props;\n  const {\n    getFieldDecorator\n  } = props.form;\n  const auth = useSelector(state => state.auth);\n  const errors = useSelector(state => state.errors);\n  const dispatch = useDispatch();\n  const [iconLoading, setIconLoading] = useState(false);\n  const [notice, setNotice] = useState('');\n  useEffect(() => {\n    setNotice(errors.message);\n  }, [errors]);\n  useEffect(() => {\n    setIconLoading(false);\n  }, [auth, errors]);\n  useEffect(() => {\n    setNotice('');\n  }, [auth]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setNotice('');\n    props.form.validateFields((err, values) => {\n      if (!err) {\n        setIconLoading(true);\n        dispatch(allActions.authenticatedActions.login(values.email, values.password, history));\n      }\n    });\n  };\n\n  const validate = (rule, value, callback) => {\n    const {\n      form\n    } = props;\n\n    if (value) {\n      form.validateFields(['confirm'], {\n        force: true\n      });\n    }\n\n    callback();\n  };\n\n  return React.createElement(GridContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(Row, {\n    type: \"flex\",\n    justify: \"center\",\n    align: \"middle\",\n    style: {\n      minHeight: '100vh'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(Col, {\n    lg: 7,\n    md: 10,\n    sm: 15,\n    xs: 20,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(Form, {\n    onSubmit: handleSubmit,\n    className: \"login-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    className: \"icon-login\",\n    type: \"login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    style: {\n      color: '#08c'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"login.login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }))), notice && React.createElement(AlertErrors, {\n    message: notice,\n    type: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(Form.Item, {\n    hasFeedback: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, getFieldDecorator('email', {\n    rules: [{\n      type: 'email',\n      message: formatMessage({\n        id: 'login.validEmail'\n      })\n    }, {\n      required: true,\n      message: formatMessage({\n        id: 'login.requiredEmail'\n      })\n    }, {\n      validator: validate\n    }]\n  })(React.createElement(Input, {\n    allowClear: true,\n    prefix: React.createElement(Icon, {\n      type: \"user\",\n      style: {\n        color: 'rgba(0,0,0,.25)'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }),\n    placeholder: formatMessage({\n      id: 'login.email'\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }))), React.createElement(Form.Item, {\n    hasFeedback: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, getFieldDecorator('password', {\n    rules: [{\n      required: true,\n      message: formatMessage({\n        id: 'login.requiredPassword'\n      })\n    }, {\n      validator: validate\n    }, {\n      min: 6,\n      message: formatMessage({\n        id: 'login.lengPassword'\n      })\n    }]\n  })(React.createElement(Input.Password, {\n    prefix: React.createElement(Icon, {\n      type: \"lock\",\n      style: {\n        color: 'rgba(0,0,0,.25)'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }),\n    allowClear: true,\n    type: \"password\",\n    placeholder: formatMessage({\n      id: 'login.password'\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }))), React.createElement(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    className: \"login-form-button\",\n    icon: \"login\",\n    loading: iconLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"login.login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"login.loginMethod\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }), React.createElement(Button, {\n    className: \"btn-google\",\n    type: \"dashed\",\n    shape: \"circle\",\n    icon: \"google\",\n    size: \"default\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"dashed\",\n    shape: \"circle\",\n    icon: \"facebook\",\n    size: \"default\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }), React.createElement(Button, {\n    className: \"btn-register\",\n    type: \"link\",\n    href: \"foo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"login.register\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }))))))));\n}\n\nconst SignIn = Form.create({\n  name: 'login'\n})(LoginForm);\nexport default SignIn;","map":{"version":3,"sources":["E:/react-antd/frontend/src/views/Login/Login.js"],"names":["React","useState","useEffect","useDispatch","useSelector","GridContent","Divider","Row","Col","Icon","Button","Form","Input","formatMessage","FormattedMessage","allActions","AlertErrors","LoginForm","props","history","getFieldDecorator","form","auth","state","errors","dispatch","iconLoading","setIconLoading","notice","setNotice","message","handleSubmit","e","preventDefault","validateFields","err","values","authenticatedActions","login","email","password","validate","rule","value","callback","force","minHeight","color","rules","type","id","required","validator","min","SignIn","create","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { GridContent } from '@ant-design/pro-layout';\r\nimport { Divider, Row, Col, Icon, Button, Form, Input } from 'antd';\r\nimport { formatMessage, FormattedMessage } from 'umi-plugin-react/locale';\r\n\r\nimport allActions from './../../actions';\r\nimport { AlertErrors } from './../../components';\r\nimport './styles.css';\r\n\r\nfunction LoginForm(props) {\r\n    const { history } = props;\r\n    const { getFieldDecorator } = props.form;\r\n\r\n    const auth = useSelector(state => state.auth);\r\n    const errors = useSelector(state => state.errors);\r\n    const dispatch = useDispatch();\r\n\r\n    const [iconLoading, setIconLoading] = useState(false);\r\n    const [notice, setNotice] = useState('');\r\n\r\n    useEffect(() => {\r\n        setNotice(errors.message);\r\n    }, [errors]);\r\n    useEffect(() => {\r\n        setIconLoading(false);\r\n    }, [auth, errors]);\r\n    useEffect(() => {\r\n        setNotice('');\r\n    }, [auth]);\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        setNotice('');\r\n        props.form.validateFields((err, values) => {\r\n            if (!err) {   \r\n                setIconLoading(true);\r\n                dispatch(allActions.authenticatedActions.login(values.email, values.password, history));\r\n            }\r\n        });\r\n    };\r\n    const validate = (rule, value, callback) => {\r\n        const { form } = props;\r\n        if (value) {\r\n            form.validateFields(['confirm'], { force: true });\r\n        }\r\n        callback();\r\n    };\r\n\r\n    return (\r\n        <GridContent>\r\n            <Row\r\n                type=\"flex\"\r\n                justify=\"center\"\r\n                align=\"middle\"\r\n                style={{ minHeight: '100vh' }}\r\n            >\r\n                <Col lg={7} md={10} sm={15} xs={20}>\r\n                    <Form onSubmit={handleSubmit} className=\"login-form\">\r\n                        <Divider>\r\n                            <Icon\r\n                                className='icon-login'\r\n                                type=\"login\"\r\n                            />\r\n                            <span style={{ color: '#08c' }}><FormattedMessage id='login.login' /></span>\r\n                        </Divider>\r\n                        {notice && <AlertErrors message={notice} type=\"error\" />}\r\n                        <Form.Item hasFeedback>\r\n                            {getFieldDecorator('email', {\r\n                                rules: [\r\n                                    {\r\n                                        type: 'email',\r\n                                        message: formatMessage({id: 'login.validEmail'})\r\n                                    },\r\n                                    {\r\n                                        required: true,\r\n                                        message: formatMessage({id: 'login.requiredEmail'})\r\n                                    },\r\n                                    {\r\n                                        validator: validate\r\n                                    }\r\n                                ]\r\n                            })(\r\n                                <Input\r\n                                    allowClear\r\n                                    prefix={\r\n                                        <Icon\r\n                                            type=\"user\"\r\n                                            style={{ color: 'rgba(0,0,0,.25)' }}\r\n                                        />\r\n                                    }\r\n                                    placeholder={formatMessage({id: 'login.email'})}\r\n                                />\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item hasFeedback>\r\n                            {getFieldDecorator('password', {\r\n                                rules: [\r\n                                    {\r\n                                        required: true,\r\n                                        message: formatMessage({id: 'login.requiredPassword'})\r\n                                    },\r\n                                    {\r\n                                        validator: validate\r\n                                    },\r\n                                    {\r\n                                        min: 6,\r\n                                        message: formatMessage({id: 'login.lengPassword'})\r\n                                    }\r\n                                ]\r\n                            })(\r\n                                <Input.Password\r\n                                    prefix={\r\n                                        <Icon\r\n                                            type=\"lock\"\r\n                                            style={{ color: 'rgba(0,0,0,.25)' }}\r\n                                        />\r\n                                    }\r\n                                    allowClear\r\n                                    type=\"password\"\r\n                                    placeholder={formatMessage({id: 'login.password'})}\r\n                                />\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                className=\"login-form-button\"\r\n                                icon=\"login\"\r\n                                loading={iconLoading}\r\n                            >\r\n                                <FormattedMessage id='login.login' />\r\n                            </Button>\r\n                            <div>\r\n                                <FormattedMessage id='login.loginMethod' />\r\n                                <Button\r\n                                    className=\"btn-google\"\r\n                                    type=\"dashed\"\r\n                                    shape=\"circle\"\r\n                                    icon=\"google\"\r\n                                    size=\"default\"\r\n                                />\r\n                                <Button\r\n                                    type=\"dashed\"\r\n                                    shape=\"circle\"\r\n                                    icon=\"facebook\"\r\n                                    size=\"default\"\r\n                                />\r\n                                <Button\r\n                                    className=\"btn-register\"\r\n                                    type=\"link\"\r\n                                    href=\"foo\"\r\n                                >\r\n                                    <FormattedMessage id='login.register' />\r\n                                </Button>\r\n                            </div>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        </GridContent>\r\n    );\r\n}\r\nconst SignIn = Form.create({ name: 'login' })(LoginForm);\r\n\r\nexport default SignIn;\r\n"]},"metadata":{},"sourceType":"module"}