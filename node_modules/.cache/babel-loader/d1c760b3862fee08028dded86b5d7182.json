{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nimport pathToRegexp from 'path-to-regexp';\n/**\n * Recursively flatten the data\n * [{path:string},{path:string}] => {path,path2}\n * @param  menus\n */\n\nexport var getFlatMenuKeys = function getFlatMenuKeys() {\n  var menuData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keys = [];\n  menuData.forEach(function (item) {\n    if (!item) {\n      return;\n    }\n\n    keys.push(item.path || '/');\n\n    if (item.children) {\n      keys = keys.concat(getFlatMenuKeys(item.children));\n    }\n  });\n  return keys;\n};\n/**\n * 获取打平的 menuData\n * 已 path 为key\n * @param menuData\n */\n\nexport var getFlatMenus = function getFlatMenus() {\n  var menuData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var menus = {};\n  menuData.forEach(function (item) {\n    if (!item || item.hideInMenu) {\n      return;\n    }\n\n    menus[item.path || '/'] = item;\n\n    if (item.children && !item.hideChildrenInMenu) {\n      menus = Object.assign(Object.assign({}, menus), getFlatMenus(item.children));\n    }\n  });\n  return menus;\n};\n/**\n * a-b-c\n * [\n *  \"a\",\n *  \"a-b\",\n *  \"a-b-c\"\n * ]\n * @param menuKey\n */\n\nexport var genKeysToArray = function genKeysToArray(menuKey) {\n  var keys = menuKey.split('-');\n  var keyArray = [];\n  keys.forEach(function (key, index) {\n    if (index === 0) {\n      keyArray.push(key);\n      return;\n    }\n\n    keyArray.push(keys.slice(0, index + 1).join('-'));\n  });\n  return keyArray;\n};\nexport var getMenuMatches = function getMenuMatches() {\n  var flatMenuKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var path = arguments.length > 1 ? arguments[1] : undefined;\n  return flatMenuKeys.filter(function (item) {\n    if (item && pathToRegexp(\"\".concat(item, \"(.*)\")).test(path)) {\n      return true;\n    }\n\n    return false;\n  }).sort(function (a, b) {\n    return a.substr(1).split('/').length - b.substr(1).split('/').length;\n  }).pop();\n}; // 获取当前的选中菜单\n\nexport var getSelectedMenuKeys = function getSelectedMenuKeys(pathname) {\n  var flatMenus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var flatMenuKeys = arguments.length > 2 ? arguments[2] : undefined;\n  var menuPathKey = getMenuMatches(flatMenuKeys, pathname || '/');\n\n  if (!menuPathKey) {\n    return [];\n  }\n\n  var menuItem = flatMenus[menuPathKey] || {\n    parentKeys: '',\n    key: ''\n  };\n\n  var keys = _toConsumableArray(menuItem.parentKeys || []);\n\n  if (menuItem.key) {\n    keys.push(menuItem.key);\n  }\n\n  return keys;\n};","map":null,"metadata":{},"sourceType":"module"}