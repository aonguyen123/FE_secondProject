{"ast":null,"code":"var _jsxFileName = \"E:\\\\web_ungdung\\\\frontend\\\\src\\\\components\\\\HeaderSearch\\\\HeaderSearch.js\";\nimport React, { useState } from 'react';\nimport { AutoComplete, Input, Divider } from 'antd';\nimport { FormattedMessage } from 'umi-plugin-react/locale';\nimport './styles.css';\nconst {\n  Search\n} = Input;\nexport default function SearchBox() {\n  const [dataSource, setDataSource] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const onSearch = searchText => {\n    setLoading(searchText ? true : false);\n    setDataSource(!searchText ? [] : [searchText, searchText.repeat(2), searchText.repeat(3)]);\n  };\n\n  const tsts = React.createElement(FormattedMessage, {\n    id: \"globalHeader.search\",\n    defaultMessage: \"Search\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  });\n  return React.createElement(\"div\", {\n    className: \"header-search\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(Divider, {\n    type: \"vertical\",\n    style: {\n      height: '35px',\n      marginLeft: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), React.createElement(AutoComplete, {\n    key: \"AutoComplete\",\n    dataSource: dataSource,\n    onSearch: onSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(Search, {\n    size: \"default\",\n    placeholder: tsts,\n    onKeyDown: e => {\n      if (e.key === 'Enter') {\n        console.log('enter');\n      }\n    },\n    onBlur: () => {\n      console.log('blur');\n    },\n    loading: loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["E:/web_ungdung/frontend/src/components/HeaderSearch/HeaderSearch.js"],"names":["React","useState","AutoComplete","Input","Divider","FormattedMessage","Search","SearchBox","dataSource","setDataSource","loading","setLoading","onSearch","searchText","repeat","tsts","height","marginLeft","e","key","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,YAAT,EAAuBC,KAAvB,EAA8BC,OAA9B,QAA6C,MAA7C;AACA,SAASC,gBAAT,QAAiC,yBAAjC;AACA,OAAO,cAAP;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaH,KAAnB;AAEA,eAAe,SAASI,SAAT,GAAqB;AAChC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMW,QAAQ,GAAGC,UAAU,IAAI;AAC3BF,IAAAA,UAAU,CAACE,UAAU,GAAG,IAAH,GAAU,KAArB,CAAV;AACAJ,IAAAA,aAAa,CACT,CAACI,UAAD,GACE,EADF,GAEE,CAACA,UAAD,EAAaA,UAAU,CAACC,MAAX,CAAkB,CAAlB,CAAb,EAAmCD,UAAU,CAACC,MAAX,CAAkB,CAAlB,CAAnC,CAHO,CAAb;AAIH,GAND;;AAOA,QAAMC,IAAI,GACN,oBAAC,gBAAD;AAAkB,IAAA,EAAE,EAAC,qBAArB;AAA2C,IAAA,cAAc,EAAC,QAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAIA,SACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAC,UAAd;AAAyB,IAAA,KAAK,EAAE;AAACC,MAAAA,MAAM,EAAE,MAAT;AAAiBC,MAAAA,UAAU,EAAE;AAA7B,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,YAAD;AACI,IAAA,GAAG,EAAC,cADR;AAEI,IAAA,UAAU,EAAET,UAFhB;AAGI,IAAA,QAAQ,EAAEI,QAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKI,oBAAC,MAAD;AACI,IAAA,IAAI,EAAC,SADT;AAEI,IAAA,WAAW,EAAEG,IAFjB;AAGI,IAAA,SAAS,EAAEG,CAAC,IAAI;AACZ,UAAIA,CAAC,CAACC,GAAF,KAAU,OAAd,EAAuB;AACnBC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;AACJ,KAPL;AAQI,IAAA,MAAM,EAAE,MAAM;AACVD,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH,KAVL;AAWI,IAAA,OAAO,EAAEX,OAXb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CAFJ,CADJ;AAwBH","sourcesContent":["import React, { useState } from 'react';\r\nimport { AutoComplete, Input, Divider } from 'antd';\r\nimport { FormattedMessage } from 'umi-plugin-react/locale';\r\nimport './styles.css';\r\nconst { Search } = Input;\r\n\r\nexport default function SearchBox() {\r\n    const [dataSource, setDataSource] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const onSearch = searchText => {\r\n        setLoading(searchText ? true : false);\r\n        setDataSource(\r\n            !searchText\r\n            ? []\r\n            : [searchText, searchText.repeat(2), searchText.repeat(3)])\r\n    };\r\n    const tsts = (\r\n        <FormattedMessage id='globalHeader.search' defaultMessage='Search' />\r\n    )\r\n\r\n    return (\r\n        <div className='header-search'>            \r\n            <Divider type='vertical' style={{height: '35px', marginLeft: 0}} />\r\n            <AutoComplete\r\n                key=\"AutoComplete\"\r\n                dataSource={dataSource}\r\n                onSearch={onSearch}\r\n            >\r\n                <Search\r\n                    size='default'\r\n                    placeholder={tsts}\r\n                    onKeyDown={e => {\r\n                        if (e.key === 'Enter') {\r\n                            console.log('enter');\r\n                        }\r\n                    }}\r\n                    onBlur={() => {\r\n                        console.log('blur');\r\n                    }}\r\n                    loading={loading}\r\n                />\r\n            </AutoComplete>\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}