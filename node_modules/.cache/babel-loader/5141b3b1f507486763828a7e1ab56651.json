{"ast":null,"code":"import jwt from 'jsonwebtoken';\nimport { checkToken, getToken, checkExpiredToken } from './../config';\nexport function checkMe() {\n  if (checkToken()) {\n    try {\n      const tokenString = getToken();\n      const token = JSON.parse(tokenString);\n      const accessToken = token.accessToken;\n      const refreshToken = token.refreshToken;\n\n      if (!checkExpiredToken(refreshToken)) {\n        return false;\n      }\n\n      const decode = jwt.decode(accessToken);\n\n      if (decode === null || undefined) {\n        return false;\n      }\n\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["E:/react-antd/frontend/src/common/checkMe.common.js"],"names":["jwt","checkToken","getToken","checkExpiredToken","checkMe","tokenString","token","JSON","parse","accessToken","refreshToken","decode","undefined","e"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,iBAA/B,QAAwD,aAAxD;AAEA,OAAO,SAASC,OAAT,GAAmB;AACtB,MAAIH,UAAU,EAAd,EAAkB;AACd,QACA;AAEI,YAAMI,WAAW,GAAGH,QAAQ,EAA5B;AACA,YAAMI,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWH,WAAX,CAAd;AACA,YAAMI,WAAW,GAAGH,KAAK,CAACG,WAA1B;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACI,YAA3B;;AACA,UAAG,CAAEP,iBAAiB,CAACO,YAAD,CAAtB,EACA;AACI,eAAO,KAAP;AACH;;AACD,YAAMC,MAAM,GAAGX,GAAG,CAACW,MAAJ,CAAWF,WAAX,CAAf;;AACA,UAAGE,MAAM,KAAK,IAAX,IAAmBC,SAAtB,EACA;AACI,eAAO,KAAP;AACH;;AACD,aAAO,IAAP;AACH,KAjBD,CAkBA,OAAMC,CAAN,EACA;AACI,aAAO,KAAP;AACH;AACJ;;AACD,SAAO,KAAP;AACH","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport { checkToken, getToken, checkExpiredToken } from './../config';\r\n\r\nexport function checkMe() {\r\n    if (checkToken()) {\r\n        try\r\n        {\r\n            \r\n            const tokenString = getToken();\r\n            const token = JSON.parse(tokenString);\r\n            const accessToken = token.accessToken;\r\n            const refreshToken = token.refreshToken;\r\n            if(! checkExpiredToken(refreshToken))\r\n            {\r\n                return false;\r\n            }\r\n            const decode = jwt.decode(accessToken);\r\n            if(decode === null || undefined)\r\n            {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        catch(e)\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}