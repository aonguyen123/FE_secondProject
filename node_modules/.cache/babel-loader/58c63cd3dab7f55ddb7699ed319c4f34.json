{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nimport isEqual from 'lodash.isequal';\nimport memoizeOne from 'memoize-one';\nimport { getKeyByPath, isUrl } from './utils';\n\nvar mergePath = function mergePath() {\n  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var parentPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '/';\n\n  if (isUrl(path)) {\n    return path;\n  }\n\n  if ((path || parentPath).startsWith('/')) {\n    return path;\n  }\n\n  return \"/\".concat(parentPath, \"/\").concat(path).replace(/\\/\\//g, '/').replace(/\\/\\//g, '/');\n}; // Conversion router to menu.\n\n\nfunction formatter(props) {\n  var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    path: '/'\n  };\n  var data = props.data,\n      _props$menu = props.menu,\n      menu = _props$menu === void 0 ? {\n    locale: true\n  } : _props$menu,\n      formatMessage = props.formatMessage,\n      authority = props.authority,\n      parentName = props.parentName;\n\n  if (!data) {\n    return [];\n  }\n\n  return data.filter(function (item) {\n    if (!item) {\n      return false;\n    }\n\n    if (item.routes || item.children) {\n      return true;\n    }\n\n    if (item.name && item.path) {\n      return true;\n    }\n\n    return false;\n  }).map(function () {\n    var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      path: '/'\n    };\n\n    if (!item.name) {\n      return item;\n    }\n\n    var path = mergePath(item.path, parent ? parent.path : '/');\n    var name = item.name;\n    var locale = item.locale || \"\".concat(parentName || 'menu', \".\").concat(name); // if enableMenuLocale use item.name,\n    // close menu international\n\n    var localeName = menu.locale !== false && formatMessage ? formatMessage({\n      id: locale,\n      defaultMessage: name\n    }) : name;\n    var _parent$parentKeys = parent.parentKeys,\n        parentKeys = _parent$parentKeys === void 0 ? [] : _parent$parentKeys;\n    var result = Object.assign(Object.assign({}, item), {\n      path: path,\n      name: localeName,\n      locale: locale,\n      key: item.key || getKeyByPath(item),\n      routes: null,\n      parentKeys: [].concat(_toConsumableArray(parentKeys), [parent.key || '/'])\n    });\n\n    if (item.routes || item.children) {\n      var children = formatter(Object.assign(Object.assign({}, props), {\n        authority: item.authority || authority,\n        data: item.routes || item.children,\n        parentName: locale\n      }), result); // Reduce memory usage\n\n      result.children = children;\n    }\n\n    return result;\n  });\n}\n\nvar memoizeOneFormatter = memoizeOne(formatter, isEqual);\n/**\n * filter menuData\n */\n\nvar defaultFilterMenuData = function defaultFilterMenuData() {\n  var menuData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return menuData.filter(function (item) {\n    return item && item.name && !item.hideInMenu;\n  }).map(function (item) {\n    if (item.children && Array.isArray(item.children) && !item.hideChildrenInMenu && item.children.some(function (child) {\n      return child && !!child.name;\n    })) {\n      var children = defaultFilterMenuData(item.children);\n      if (children.length) return Object.assign(Object.assign({}, item), {\n        children: children\n      });\n    }\n\n    return Object.assign(Object.assign({}, item), {\n      children: undefined\n    });\n  }).filter(function (item) {\n    return item;\n  });\n};\n/**\n * 获取面包屑映射\n * @param MenuDataItem[] menuData 菜单配置\n */\n\n\nvar getBreadcrumbNameMap = function getBreadcrumbNameMap(menuData) {\n  // Map is used to ensure the order of keys\n  var routerMap = new Map();\n\n  var flattenMenuData = function flattenMenuData(data, parent) {\n    data.forEach(function (menuItem) {\n      if (!menuItem) {\n        return;\n      }\n\n      if (menuItem && menuItem.children) {\n        flattenMenuData(menuItem.children, menuItem);\n      } // Reduce memory usage\n\n\n      var path = mergePath(menuItem.path, parent ? parent.path : '/');\n      routerMap.set(path, menuItem);\n    });\n  };\n\n  flattenMenuData(menuData);\n  return routerMap;\n};\n\nvar memoizeOneGetBreadcrumbNameMap = memoizeOne(getBreadcrumbNameMap, isEqual);\n\nfunction fromEntries(iterable) {\n  return _toConsumableArray(iterable).reduce(function (obj, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        val = _ref2[1];\n\n    obj[key] = val;\n    return obj;\n  }, {});\n}\n\nexport default (function (routes, menu, formatMessage, menuDataRender) {\n  var originalMenuData = memoizeOneFormatter({\n    data: routes,\n    formatMessage: formatMessage,\n    menu: menu || {\n      locale: false\n    }\n  });\n\n  if (menuDataRender) {\n    originalMenuData = memoizeOneFormatter({\n      data: menuDataRender(originalMenuData),\n      menu: menu,\n      formatMessage: formatMessage\n    });\n  }\n\n  var menuData = defaultFilterMenuData(originalMenuData); // Map type used for internal logic\n\n  var breadcrumbMap = memoizeOneGetBreadcrumbNameMap(originalMenuData); // Object type used for external users\n\n  var breadcrumb = fromEntries(breadcrumbMap);\n  return {\n    breadcrumb: breadcrumb,\n    breadcrumbMap: breadcrumbMap,\n    menuData: menuData\n  };\n});","map":null,"metadata":{},"sourceType":"module"}