{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport { useState, useEffect } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nexport var MediaQueryEnum = {\n  xs: {\n    maxWidth: 575,\n    matchMedia: '(max-width: 575px)'\n  },\n  sm: {\n    minWidth: 576,\n    maxWidth: 767,\n    matchMedia: '(min-width: 576px) and (max-width: 767px)'\n  },\n  md: {\n    minWidth: 768,\n    maxWidth: 991,\n    matchMedia: '(min-width: 768px) and (max-width: 991px)'\n  },\n  lg: {\n    minWidth: 992,\n    maxWidth: 1199,\n    matchMedia: '(min-width: 992px) and (max-width: 1199px)'\n  },\n  xl: {\n    minWidth: 1200,\n    maxWidth: 1599,\n    matchMedia: '(min-width: 1200px) and (max-width: 1599px)'\n  },\n  xxl: {\n    minWidth: 1600,\n    matchMedia: '(min-width: 1600px)'\n  }\n};\n/**\n * loop query screen className\n * Array.find will throw a error\n * `Rendered more hooks than during the previous render.`\n * So should use Array.forEach\n */\n\nexport var getScreenClassName = function getScreenClassName() {\n  var className = 'md';\n  var mediaQueryKey = Object.keys(MediaQueryEnum).find(function (key) {\n    var matchMedia = MediaQueryEnum[key].matchMedia;\n\n    if (window.matchMedia(matchMedia).matches) {\n      return true;\n    }\n\n    return false;\n  });\n  className = mediaQueryKey;\n  return className;\n};\n\nvar useMedia = function useMedia() {\n  var isMd = useMediaQuery(MediaQueryEnum.md);\n  var isLg = useMediaQuery(MediaQueryEnum.lg);\n  var isXxl = useMediaQuery(MediaQueryEnum.xxl);\n  var isXl = useMediaQuery(MediaQueryEnum.xl);\n  var isSm = useMediaQuery(MediaQueryEnum.sm);\n  var isXs = useMediaQuery(MediaQueryEnum.xs);\n\n  var _useState = useState(getScreenClassName()),\n      _useState2 = _slicedToArray(_useState, 2),\n      colSpan = _useState2[0],\n      setColSpan = _useState2[1];\n\n  useEffect(function () {\n    if (isXxl) {\n      setColSpan('xxl');\n      return;\n    }\n\n    if (isXl) {\n      setColSpan('xl');\n      return;\n    }\n\n    if (isLg) {\n      setColSpan('lg');\n      return;\n    }\n\n    if (isMd) {\n      setColSpan('md');\n      return;\n    }\n\n    if (isSm) {\n      setColSpan('sm');\n      return;\n    }\n\n    if (isXs) {\n      setColSpan('xs');\n      return;\n    }\n\n    setColSpan('md');\n  }, [isMd, isLg, isXxl, isXl, isSm, isXs]);\n  return colSpan;\n};\n\nexport default useMedia;","map":null,"metadata":{},"sourceType":"module"}