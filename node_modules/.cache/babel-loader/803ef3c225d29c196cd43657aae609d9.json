{"ast":null,"code":"var _jsxFileName = \"E:\\\\react-antd\\\\frontend\\\\src\\\\views\\\\Setting\\\\components\\\\GeographicView\\\\GeographicView.js\";\nimport React, { forwardRef, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Spin, Select, Row, Col } from 'antd';\nimport allActions from './../../../../actions';\nimport './styles.css';\nconst {\n  Option\n} = Select;\nconst nullSelectItem = {\n  label: '',\n  key: ''\n};\nconst GeographicView = forwardRef((props, ref) => {\n  const dispatch = useDispatch();\n  const provinces = useSelector(state => state.provincesReducer.provinces);\n  const districts = useSelector(state => state.provincesReducer.districts);\n  const loading = useSelector(state => state.provincesReducer.loadingProvince);\n  useEffect(() => {\n    dispatch(allActions.geocodeActions.getProvinces());\n  }, [dispatch]);\n\n  const conversionObject = () => {\n    const {\n      value\n    } = props;\n\n    if (!value) {\n      return {\n        province: nullSelectItem,\n        district: nullSelectItem\n      };\n    }\n\n    const {\n      province,\n      district\n    } = value;\n    return {\n      province: province || nullSelectItem,\n      district: district || nullSelectItem\n    };\n  };\n\n  const getProvinceOption = () => {\n    if (provinces.length !== 0) {\n      return getOption(provinces);\n    }\n\n    return [];\n  };\n\n  const getDistrictOption = () => {\n    if (districts.length !== 0) {\n      return getOption(districts);\n    }\n\n    return [];\n  };\n\n  const getOption = list => {\n    return list.map(item => React.createElement(Option, {\n      key: item.id,\n      value: item.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, item.name));\n  };\n\n  const selectProvinceItem = item => {\n    const {\n      onChange\n    } = props;\n    dispatch(allActions.geocodeActions.getDistricts(item.key));\n\n    if (onChange) {\n      onChange({\n        province: item,\n        district: nullSelectItem\n      });\n    }\n  };\n\n  const selectDistrictItem = item => {\n    const {\n      value,\n      onChange\n    } = props;\n\n    if (value && onChange) {\n      onChange({\n        province: value.province,\n        district: item\n      });\n    }\n  };\n\n  const {\n    province,\n    district\n  } = conversionObject();\n  return React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(Col, {\n    xl: 24,\n    lg: 24,\n    md: 24,\n    sm: 24,\n    xs: 24,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(Spin, {\n    spinning: loading,\n    wrapperClassName: \"row\",\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(Select, {\n    className: \"item\",\n    showSearch: true,\n    onSelect: selectProvinceItem,\n    loading: provinces.length !== 0 ? false : true,\n    labelInValue: true,\n    value: province,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, getProvinceOption()), React.createElement(Select, {\n    className: \"item\",\n    showSearch: true,\n    labelInValue: true,\n    value: district,\n    onSelect: selectDistrictItem,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, getDistrictOption()))));\n});\nexport default GeographicView;","map":{"version":3,"sources":["E:/react-antd/frontend/src/views/Setting/components/GeographicView/GeographicView.js"],"names":["React","forwardRef","useState","useEffect","useSelector","useDispatch","Spin","Select","Row","Col","allActions","Option","nullSelectItem","label","key","GeographicView","props","ref","dispatch","provinces","state","provincesReducer","districts","loading","loadingProvince","geocodeActions","getProvinces","conversionObject","value","province","district","getProvinceOption","length","getOption","getDistrictOption","list","map","item","id","name","selectProvinceItem","onChange","getDistricts","selectDistrictItem"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,GAAvB,EAA4BC,GAA5B,QAAuC,MAAvC;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAO,cAAP;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaJ,MAAnB;AACA,MAAMK,cAAc,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,GAAG,EAAE;AAFc,CAAvB;AAKA,MAAMC,cAAc,GAAGd,UAAU,CAAC,CAACe,KAAD,EAAQC,GAAR,KAAgB;AAC9C,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAMc,SAAS,GAAGf,WAAW,CAACgB,KAAK,IAAIA,KAAK,CAACC,gBAAN,CAAuBF,SAAjC,CAA7B;AACA,QAAMG,SAAS,GAAGlB,WAAW,CAACgB,KAAK,IAAIA,KAAK,CAACC,gBAAN,CAAuBC,SAAjC,CAA7B;AACA,QAAMC,OAAO,GAAGnB,WAAW,CAACgB,KAAK,IAAIA,KAAK,CAACC,gBAAN,CAAuBG,eAAjC,CAA3B;AAEArB,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,QAAQ,CAACR,UAAU,CAACe,cAAX,CAA0BC,YAA1B,EAAD,CAAR;AACH,GAFQ,EAEN,CAACR,QAAD,CAFM,CAAT;;AAIA,QAAMS,gBAAgB,GAAG,MAAM;AAC3B,UAAM;AAAEC,MAAAA;AAAF,QAAYZ,KAAlB;;AACA,QAAI,CAACY,KAAL,EAAY;AACR,aAAO;AACHC,QAAAA,QAAQ,EAAEjB,cADP;AAEHkB,QAAAA,QAAQ,EAAElB;AAFP,OAAP;AAIH;;AACD,UAAM;AAAEiB,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAyBF,KAA/B;AACA,WAAO;AACHC,MAAAA,QAAQ,EAAEA,QAAQ,IAAIjB,cADnB;AAEHkB,MAAAA,QAAQ,EAAEA,QAAQ,IAAIlB;AAFnB,KAAP;AAIH,GAbD;;AAeA,QAAMmB,iBAAiB,GAAG,MAAM;AAC5B,QAAIZ,SAAS,CAACa,MAAV,KAAqB,CAAzB,EAA4B;AACxB,aAAOC,SAAS,CAACd,SAAD,CAAhB;AACH;;AACD,WAAO,EAAP;AACH,GALD;;AAMA,QAAMe,iBAAiB,GAAG,MAAM;AAC5B,QAAIZ,SAAS,CAACU,MAAV,KAAqB,CAAzB,EAA4B;AACxB,aAAOC,SAAS,CAACX,SAAD,CAAhB;AACH;;AACD,WAAO,EAAP;AACH,GALD;;AAMA,QAAMW,SAAS,GAAGE,IAAI,IAAI;AACtB,WAAOA,IAAI,CAACC,GAAL,CAASC,IAAI,IAChB,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAlB;AAAsB,MAAA,KAAK,EAAED,IAAI,CAACE,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKF,IAAI,CAACE,IADV,CADG,CAAP;AAKH,GAND;;AAOA,QAAMC,kBAAkB,GAAGH,IAAI,IAAI;AAC/B,UAAM;AAAEI,MAAAA;AAAF,QAAezB,KAArB;AAEAE,IAAAA,QAAQ,CAACR,UAAU,CAACe,cAAX,CAA0BiB,YAA1B,CAAuCL,IAAI,CAACvB,GAA5C,CAAD,CAAR;;AACA,QAAI2B,QAAJ,EAAc;AACVA,MAAAA,QAAQ,CAAC;AACLZ,QAAAA,QAAQ,EAAEQ,IADL;AAELP,QAAAA,QAAQ,EAAElB;AAFL,OAAD,CAAR;AAIH;AACJ,GAVD;;AAWA,QAAM+B,kBAAkB,GAAGN,IAAI,IAAI;AAC/B,UAAM;AAAET,MAAAA,KAAF;AAASa,MAAAA;AAAT,QAAsBzB,KAA5B;;AAEA,QAAIY,KAAK,IAAIa,QAAb,EAAuB;AACnBA,MAAAA,QAAQ,CAAC;AACLZ,QAAAA,QAAQ,EAAED,KAAK,CAACC,QADX;AAELC,QAAAA,QAAQ,EAAEO;AAFL,OAAD,CAAR;AAIH;AACJ,GATD;;AAWA,QAAM;AAAER,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAyBH,gBAAgB,EAA/C;AACA,SACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAa,IAAA,EAAE,EAAE,EAAjB;AAAqB,IAAA,EAAE,EAAE,EAAzB;AAA6B,IAAA,EAAE,EAAE,EAAjC;AAAqC,IAAA,EAAE,EAAE,EAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AACI,IAAA,QAAQ,EAAEJ,OADd;AAEI,IAAA,gBAAgB,EAAC,KAFrB;AAGI,IAAA,IAAI,EAAC,OAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKI,oBAAC,MAAD;AACI,IAAA,SAAS,EAAC,MADd;AAEI,IAAA,UAAU,MAFd;AAGI,IAAA,QAAQ,EAAEiB,kBAHd;AAII,IAAA,OAAO,EAAErB,SAAS,CAACa,MAAV,KAAqB,CAArB,GAAyB,KAAzB,GAAiC,IAJ9C;AAKI,IAAA,YAAY,MALhB;AAMI,IAAA,KAAK,EAAEH,QANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQKE,iBAAiB,EARtB,CALJ,EAeI,oBAAC,MAAD;AACI,IAAA,SAAS,EAAC,MADd;AAEI,IAAA,UAAU,MAFd;AAGI,IAAA,YAAY,MAHhB;AAII,IAAA,KAAK,EAAED,QAJX;AAKI,IAAA,QAAQ,EAAEa,kBALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOKT,iBAAiB,EAPtB,CAfJ,CADJ,CADJ,CADJ;AA+BH,CAlGgC,CAAjC;AAoGA,eAAenB,cAAf","sourcesContent":["import React, { forwardRef, useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Spin, Select, Row, Col } from 'antd';\r\nimport allActions from './../../../../actions';\r\nimport './styles.css';\r\nconst { Option } = Select;\r\nconst nullSelectItem = {\r\n    label: '',\r\n    key: ''\r\n};\r\n\r\nconst GeographicView = forwardRef((props, ref) => {\r\n    const dispatch = useDispatch();\r\n    const provinces = useSelector(state => state.provincesReducer.provinces);\r\n    const districts = useSelector(state => state.provincesReducer.districts);\r\n    const loading = useSelector(state => state.provincesReducer.loadingProvince);\r\n\r\n    useEffect(() => {\r\n        dispatch(allActions.geocodeActions.getProvinces());\r\n    }, [dispatch]);\r\n\r\n    const conversionObject = () => {\r\n        const { value } = props;\r\n        if (!value) {\r\n            return {\r\n                province: nullSelectItem,\r\n                district: nullSelectItem\r\n            };\r\n        }\r\n        const { province, district } = value;\r\n        return {\r\n            province: province || nullSelectItem,\r\n            district: district || nullSelectItem\r\n        };\r\n    };\r\n\r\n    const getProvinceOption = () => {\r\n        if (provinces.length !== 0) {\r\n            return getOption(provinces);\r\n        }\r\n        return [];\r\n    };\r\n    const getDistrictOption = () => {\r\n        if (districts.length !== 0) {\r\n            return getOption(districts);\r\n        }\r\n        return [];\r\n    };\r\n    const getOption = list => {\r\n        return list.map(item => (\r\n            <Option key={item.id} value={item.name}>\r\n                {item.name}\r\n            </Option>\r\n        ));\r\n    };\r\n    const selectProvinceItem = item => {\r\n        const { onChange } = props;\r\n\r\n        dispatch(allActions.geocodeActions.getDistricts(item.key));\r\n        if (onChange) {\r\n            onChange({\r\n                province: item,\r\n                district: nullSelectItem\r\n            });\r\n        }\r\n    };\r\n    const selectDistrictItem = item => {\r\n        const { value, onChange } = props;\r\n\r\n        if (value && onChange) {\r\n            onChange({\r\n                province: value.province,\r\n                district: item\r\n            });\r\n        }\r\n    };\r\n\r\n    const { province, district } = conversionObject();\r\n    return (\r\n        <Row>\r\n            <Col xl={24} lg={24} md={24} sm={24} xs={24}>\r\n                <Spin\r\n                    spinning={loading}\r\n                    wrapperClassName=\"row\"\r\n                    size=\"small\"\r\n                >\r\n                    <Select\r\n                        className=\"item\"\r\n                        showSearch\r\n                        onSelect={selectProvinceItem}\r\n                        loading={provinces.length !== 0 ? false : true}\r\n                        labelInValue\r\n                        value={province}\r\n                    >\r\n                        {getProvinceOption()}\r\n                    </Select>\r\n                    <Select\r\n                        className=\"item\"\r\n                        showSearch\r\n                        labelInValue\r\n                        value={district}\r\n                        onSelect={selectDistrictItem}\r\n                    >\r\n                        {getDistrictOption()}\r\n                    </Select>\r\n                </Spin>\r\n            </Col>\r\n        </Row>\r\n    );\r\n});\r\n\r\nexport default GeographicView;\r\n"]},"metadata":{},"sourceType":"module"}