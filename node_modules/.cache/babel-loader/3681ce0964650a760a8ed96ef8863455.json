{"ast":null,"code":"import \"antd/es/layout/style\";\nimport _Layout from \"antd/es/layout\";\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nimport './Header.less';\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport GlobalHeader from './GlobalHeader';\nimport TopNavHeader from './TopNavHeader';\nvar Header = _Layout.Header;\n\nvar HeaderView =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(HeaderView, _Component);\n\n  function HeaderView() {\n    var _this;\n\n    _classCallCheck(this, HeaderView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HeaderView).apply(this, arguments));\n\n    _this.renderContent = function () {\n      var _this$props = _this.props,\n          isMobile = _this$props.isMobile,\n          onCollapse = _this$props.onCollapse,\n          navTheme = _this$props.navTheme,\n          layout = _this$props.layout,\n          headerRender = _this$props.headerRender;\n      var isTop = layout === 'topmenu';\n      var defaultDom = React.createElement(GlobalHeader, Object.assign({\n        onCollapse: onCollapse\n      }, _this.props));\n\n      if (isTop && !isMobile) {\n        defaultDom = React.createElement(TopNavHeader, Object.assign({\n          theme: navTheme,\n          mode: \"horizontal\",\n          onCollapse: onCollapse\n        }, _this.props));\n      }\n\n      if (headerRender) {\n        return headerRender(_this.props, defaultDom);\n      }\n\n      return defaultDom;\n    };\n\n    return _this;\n  }\n\n  _createClass(HeaderView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          fixedHeader = _this$props2.fixedHeader,\n          layout = _this$props2.layout,\n          propsClassName = _this$props2.className,\n          style = _this$props2.style,\n          collapsed = _this$props2.collapsed,\n          _this$props2$siderWid = _this$props2.siderWidth,\n          siderWidth = _this$props2$siderWid === void 0 ? 256 : _this$props2$siderWid,\n          hasSiderMenu = _this$props2.hasSiderMenu,\n          headerRender = _this$props2.headerRender,\n          isMobile = _this$props2.isMobile;\n      var isTop = layout === 'topmenu';\n      var needSettingWidth = fixedHeader && hasSiderMenu && !isTop && !isMobile;\n      var className = classNames(propsClassName, {\n        'ant-pro-fixed-header': fixedHeader,\n        'ant-pro-top-menu': isTop\n      });\n\n      if (headerRender === false) {\n        return null;\n      }\n\n      return React.createElement(React.Fragment, null, fixedHeader && React.createElement(Header, null), React.createElement(Header, {\n        style: Object.assign({\n          padding: 0,\n          width: needSettingWidth ? \"calc(100% - \".concat(collapsed ? 80 : siderWidth, \"px)\") : '100%',\n          zIndex: 9,\n          right: fixedHeader ? 0 : undefined\n        }, style),\n        className: className\n      }, this.renderContent()));\n    }\n  }]);\n\n  return HeaderView;\n}(Component);\n\nexport default HeaderView;","map":null,"metadata":{},"sourceType":"module"}