{"ast":null,"code":"import { useEffect, useRef } from 'react';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar getCircularReplacer = function getCircularReplacer() {\n  var seen = new WeakSet();\n  return function (key, value) {\n    if (_typeof(value) === 'object' && value !== null) {\n      if (seen.has(value)) {\n        return;\n      }\n\n      seen.add(value);\n    }\n\n    return value;\n  };\n};\n/**\r\n * 一个更加安全的 stringify，可以解决循环依赖的问题\r\n * @param value\r\n */\n\n\nvar stringify = function stringify(value) {\n  return JSON.stringify(value, getCircularReplacer());\n};\n\nvar jsonCompareEquals = function jsonCompareEquals(value, nextValue) {\n  try {\n    return stringify(value) === stringify(nextValue);\n  } catch (error) {// do something\n  }\n\n  return false;\n};\n\nfunction useJsonCompareMemoize(value) {\n  var ref = useRef(''); // it can be done by using useMemo as well\n  // but useRef is rather cleaner and easier\n\n  if (!jsonCompareEquals(value, ref.current)) {\n    ref.current = JSON.stringify(value, getCircularReplacer());\n  }\n\n  return ref.current;\n}\n\nfunction useDeepJSONEffect(effect, dependencies) {\n  useEffect(effect, [useJsonCompareMemoize(dependencies)]);\n}\n\nexport default useDeepJSONEffect;\nexport { stringify };","map":null,"metadata":{},"sourceType":"module"}