{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nimport React from 'react';\nimport pathToRegexp from 'path-to-regexp';\nimport { urlToList } from './pathTools'; // 渲染Breadcrumb 子节点\n// Render the Breadcrumb child node\n\nvar defaultItemRender = function defaultItemRender(_ref) {\n  var breadcrumbName = _ref.breadcrumbName,\n      path = _ref.path;\n  return React.createElement(\"a\", {\n    href: path\n  }, breadcrumbName);\n};\n\nvar renderItemLocal = function renderItemLocal(item, props) {\n  var formatMessage = props.formatMessage,\n      _props$menu = props.menu,\n      menu = _props$menu === void 0 ? {\n    locale: false\n  } : _props$menu;\n\n  if (item.locale && formatMessage && menu.locale !== false) {\n    return formatMessage({\n      id: item.locale,\n      defaultMessage: item.name\n    });\n  }\n\n  return item.name;\n};\n\nexport var getBreadcrumb = function getBreadcrumb(breadcrumbMap, url) {\n  if (!breadcrumbMap) {\n    return {\n      path: ''\n    };\n  }\n\n  var breadcrumbItem = breadcrumbMap.get(url);\n\n  if (!breadcrumbItem) {\n    // Find the first matching path in the order defined by route config\n    // 按照 route config 定义的顺序找到第一个匹配的路径\n    var targetPath = _toConsumableArray(breadcrumbMap.keys()).find(function (path) {\n      return (// remove ? ,不然会重复\n        pathToRegexp(path.replace('?', '')).test(url)\n      );\n    });\n\n    if (targetPath) {\n      breadcrumbItem = breadcrumbMap.get(targetPath);\n    }\n  }\n\n  return breadcrumbItem || {\n    path: ''\n  };\n};\nexport var getBreadcrumbFromProps = function getBreadcrumbFromProps(props) {\n  var location = props.location,\n      breadcrumbMap = props.breadcrumbMap;\n  return {\n    location: location,\n    breadcrumbMap: breadcrumbMap\n  };\n}; // Generated according to props\n\nvar conversionFromProps = function conversionFromProps(props) {\n  var _props$breadcrumbList = props.breadcrumbList,\n      breadcrumbList = _props$breadcrumbList === void 0 ? [] : _props$breadcrumbList;\n  return breadcrumbList.map(function (item) {\n    var title = item.title,\n        href = item.href;\n    return {\n      path: href,\n      breadcrumbName: title\n    };\n  }).filter(function (item) {\n    return item.path;\n  });\n};\n\nvar conversionFromLocation = function conversionFromLocation() {\n  var routerLocation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    pathname: '/'\n  };\n  var breadcrumbMap = arguments.length > 1 ? arguments[1] : undefined;\n  var props = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (!routerLocation) {\n    return [];\n  } // Convertor the url to an array\n\n\n  var pathSnippets = urlToList(routerLocation.pathname); // Loop data mosaic routing\n\n  var extraBreadcrumbItems = pathSnippets.map(function (url) {\n    var currentBreadcrumb = getBreadcrumb(breadcrumbMap, url);\n\n    if (currentBreadcrumb.inherited) {\n      return {\n        path: '',\n        breadcrumbName: ''\n      };\n    }\n\n    var name = renderItemLocal(currentBreadcrumb, props);\n    var hideInBreadcrumb = currentBreadcrumb.hideInBreadcrumb;\n    return name && !hideInBreadcrumb ? {\n      path: url,\n      breadcrumbName: name,\n      component: currentBreadcrumb.component\n    } : {\n      path: '',\n      breadcrumbName: ''\n    };\n  }).filter(function (item) {\n    return item && item.path;\n  });\n  return extraBreadcrumbItems;\n};\n/**\n * 将参数转化为面包屑\n * Convert parameters into breadcrumbs\n */\n\n\nexport var genBreadcrumbProps = function genBreadcrumbProps(props) {\n  var breadcrumbList = props.breadcrumbList;\n\n  var _getBreadcrumbFromPro = getBreadcrumbFromProps(props),\n      location = _getBreadcrumbFromPro.location,\n      breadcrumbMap = _getBreadcrumbFromPro.breadcrumbMap;\n\n  if (breadcrumbList && breadcrumbList.length) {\n    return conversionFromProps(props);\n  } // 根据 location 生成 面包屑\n  // Generate breadcrumbs based on location\n\n\n  if (location && location.pathname && breadcrumbMap) {\n    return conversionFromLocation(location, breadcrumbMap, props);\n  }\n\n  return [];\n}; // use breadcrumbRender to change routes\n\nexport var getBreadcrumbProps = function getBreadcrumbProps(props) {\n  var breadcrumbRender = props.breadcrumbRender,\n      propsItemRender = props.itemRender;\n  var routesArray = genBreadcrumbProps(props);\n  var itemRender = propsItemRender || defaultItemRender;\n  var routes = routesArray; // if routes.length =1, don't show it\n\n  if (breadcrumbRender) {\n    routes = breadcrumbRender(routes) || [];\n  }\n\n  if (routes && routes.length < 2) {\n    routes = undefined;\n  }\n\n  return {\n    routes: routes,\n    itemRender: itemRender\n  };\n};","map":null,"metadata":{},"sourceType":"module"}