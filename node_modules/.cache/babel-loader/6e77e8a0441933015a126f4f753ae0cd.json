{"ast":null,"code":"var _jsxFileName = \"E:\\\\web_ungdung\\\\frontend\\\\src\\\\components\\\\NoticeView\\\\NoticeView.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Tag, message } from 'antd';\nimport moment from 'moment';\nimport NoticeIcon from './NoticeIcon';\nimport { groupBy } from 'lodash';\nexport default function NoticeView(props) {\n  const [loadingNotice, setLoadingNotice] = useState(true);\n  useEffect(() => {\n    const fetchingNotices = () => {\n      console.log('sss');\n      setTimeout(() => {\n        setLoadingNotice(false);\n      }, 5000);\n    };\n\n    fetchingNotices();\n  }, []);\n\n  const handleNoticeClear = (title, key) => {\n    message.success(`${'清空了'} ${title}`);\n  };\n\n  const getNoticeData = () => {\n    const {\n      notices = []\n    } = props;\n\n    if (notices.length === 0) {\n      return {};\n    }\n\n    const newNotices = notices.map(notice => {\n      const newNotice = { ...notice\n      };\n\n      if (newNotice.datetime) {\n        newNotice.datetime = moment(notice.datetime).fromNow();\n      }\n\n      if (newNotice.id) {\n        newNotice.key = newNotice.id;\n      }\n\n      if (newNotice.extra && newNotice.status) {\n        const color = {\n          todo: '',\n          processing: 'blue',\n          urgent: 'red',\n          doing: 'gold'\n        }[newNotice.status];\n        newNotice.extra = React.createElement(Tag, {\n          color: color,\n          style: {\n            marginRight: 0\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, newNotice.extra);\n      }\n\n      return newNotice;\n    });\n    return groupBy(newNotices, 'type');\n  };\n\n  const getUnreadData = noticeData => {\n    const unreadMsg = {};\n    Object.keys(noticeData).forEach(key => {\n      const value = noticeData[key];\n\n      if (!unreadMsg[key]) {\n        unreadMsg[key] = 0;\n      }\n\n      if (Array.isArray(value)) {\n        unreadMsg[key] = value.filter(item => !item.read).length;\n      }\n    });\n    return unreadMsg;\n  };\n\n  const noticeData = getNoticeData();\n  const unreadMsg = getUnreadData(noticeData);\n  return React.createElement(NoticeIcon, {\n    className: \"action\" // count={currentUser && currentUser.unreadCount}\n    ,\n    onItemClick: item => {},\n    loading: loadingNotice,\n    clearText: \"\\u6E05\\u7A7A\",\n    viewMoreText: \"\\u67E5\\u770B\\u66F4\\u591A\",\n    onClear: handleNoticeClear //onPopupVisibleChange={onNoticeVisibleChange}\n    ,\n    onViewMore: () => message.info('Click on view more'),\n    clearClose: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(NoticeIcon.Tab, {\n    tabKey: \"notification\" // count={unreadMsg.notification}\n    ,\n    count: 4 //list\n    ,\n    title: \"\\u901A\\u77E5\",\n    emptyText: \"\\u4F60\\u5DF2\\u67E5\\u770B\\u6240\\u6709\\u901A\\u77E5\",\n    showViewMore: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(NoticeIcon.Tab, {\n    tabKey: \"message\" //count={unreadMsg.message}\n    ,\n    count: 4,\n    list: noticeData.message,\n    title: \"\\u6D88\\u606F\",\n    emptyText: \"\\u60A8\\u5DF2\\u8BFB\\u5B8C\\u6240\\u6709\\u6D88\\u606F\",\n    showViewMore: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), React.createElement(NoticeIcon.Tab, {\n    tabKey: \"event\",\n    title: \"\\u5F85\\u529E\",\n    emptyText: \"\\u4F60\\u5DF2\\u5B8C\\u6210\\u6240\\u6709\\u5F85\\u529E\",\n    count: 4 //count={unreadMsg.event}\n    ,\n    list: noticeData.event,\n    showViewMore: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["E:/web_ungdung/frontend/src/components/NoticeView/NoticeView.js"],"names":["React","useEffect","useState","Tag","message","moment","NoticeIcon","groupBy","NoticeView","props","loadingNotice","setLoadingNotice","fetchingNotices","console","log","setTimeout","handleNoticeClear","title","key","success","getNoticeData","notices","length","newNotices","map","notice","newNotice","datetime","fromNow","id","extra","status","color","todo","processing","urgent","doing","marginRight","getUnreadData","noticeData","unreadMsg","Object","keys","forEach","value","Array","isArray","filter","item","read","info","event"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Tag, message } from 'antd';\r\nimport moment from 'moment';\r\nimport NoticeIcon from './NoticeIcon';\r\nimport { groupBy } from 'lodash';\r\n\r\nexport default function NoticeView(props) {\r\n    const [loadingNotice, setLoadingNotice] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const fetchingNotices = () => {\r\n            console.log('sss')\r\n            setTimeout(() => {\r\n                setLoadingNotice(false);\r\n            }, 5000);\r\n        }\r\n        fetchingNotices();\r\n    }, [])\r\n\r\n    const handleNoticeClear = (title, key) => {        \r\n        message.success(`${'清空了'} ${title}`);\r\n    };\r\n    const getNoticeData = () => {\r\n        const { notices = [] } = props;\r\n\r\n        if (notices.length === 0) {\r\n            return {};\r\n        }\r\n\r\n        const newNotices = notices.map(notice => {\r\n            const newNotice = { ...notice };\r\n\r\n            if (newNotice.datetime) {\r\n                newNotice.datetime = moment(notice.datetime).fromNow();\r\n            }\r\n\r\n            if (newNotice.id) {\r\n                newNotice.key = newNotice.id;\r\n            }\r\n\r\n            if (newNotice.extra && newNotice.status) {\r\n                const color = {\r\n                    todo: '',\r\n                    processing: 'blue',\r\n                    urgent: 'red',\r\n                    doing: 'gold'\r\n                }[newNotice.status];\r\n                newNotice.extra = (\r\n                    <Tag\r\n                        color={color}\r\n                        style={{\r\n                            marginRight: 0\r\n                        }}\r\n                    >\r\n                        {newNotice.extra}\r\n                    </Tag>\r\n                );\r\n            }\r\n\r\n            return newNotice;\r\n        });\r\n        return groupBy(newNotices, 'type');\r\n    };\r\n    const getUnreadData = noticeData => {\r\n        const unreadMsg = {};\r\n        Object.keys(noticeData).forEach(key => {\r\n            const value = noticeData[key];\r\n\r\n            if (!unreadMsg[key]) {\r\n                unreadMsg[key] = 0;\r\n            }\r\n\r\n            if (Array.isArray(value)) {\r\n                unreadMsg[key] = value.filter(item => !item.read).length;\r\n            }\r\n        });\r\n        return unreadMsg;\r\n    };\r\n    const noticeData = getNoticeData();\r\n    const unreadMsg = getUnreadData(noticeData);\r\n\r\n    return (\r\n        <NoticeIcon\r\n            className='action'\r\n            // count={currentUser && currentUser.unreadCount}\r\n            onItemClick={item => {\r\n                \r\n            }}\r\n            loading={loadingNotice}\r\n            clearText=\"清空\"\r\n            viewMoreText=\"查看更多\"\r\n            onClear={handleNoticeClear}\r\n            //onPopupVisibleChange={onNoticeVisibleChange}\r\n            onViewMore={() => message.info('Click on view more')}\r\n            clearClose\r\n        >\r\n            <NoticeIcon.Tab\r\n                tabKey=\"notification\"\r\n                // count={unreadMsg.notification}\r\n                count={4}\r\n                //list\r\n                title=\"通知\"\r\n                emptyText=\"你已查看所有通知\"\r\n                showViewMore\r\n            />\r\n            <NoticeIcon.Tab\r\n                tabKey=\"message\"\r\n                //count={unreadMsg.message}\r\n                count={4}\r\n                list={noticeData.message}\r\n                title=\"消息\"\r\n                emptyText=\"您已读完所有消息\"\r\n                showViewMore\r\n            />\r\n            <NoticeIcon.Tab\r\n                tabKey=\"event\"\r\n                title=\"待办\"\r\n                emptyText=\"你已完成所有待办\"\r\n                count={4}\r\n                //count={unreadMsg.event}\r\n                list={noticeData.event}\r\n                showViewMore\r\n            />\r\n        </NoticeIcon>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}