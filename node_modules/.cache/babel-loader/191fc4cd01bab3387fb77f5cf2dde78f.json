{"ast":null,"code":"var _jsxFileName = \"E:\\\\react-antd\\\\frontend\\\\src\\\\views\\\\Setting\\\\components\\\\FormSettingView\\\\FormSettingView.js\";\nimport React from 'react';\nimport { Form, Input, Tooltip, Icon, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete } from 'antd';\nconst {\n  Option\n} = Select;\nconst AutoCompleteOption = AutoComplete.Option;\nconst residences = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake'\n    }]\n  }]\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men'\n    }]\n  }]\n}];\n\nclass RegistrationForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n        }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const {\n        value\n      } = e.target;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const {\n        form\n      } = this.props;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const {\n        form\n      } = this.props;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    this.handleWebsiteChange = value => {\n      let autoCompleteResult;\n\n      if (!value) {\n        autoCompleteResult = [];\n      } else {\n        autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\n      }\n\n      this.setState({\n        autoCompleteResult\n      });\n    };\n  }\n\n  render() {\n    const {\n      getFieldDecorator\n    } = this.props.form;\n    const {\n      autoCompleteResult\n    } = this.state;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    const prefixSelector = getFieldDecorator('prefix', {\n      initialValue: '86'\n    })(React.createElement(Select, {\n      style: {\n        width: 70\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(Option, {\n      value: \"86\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"+86\"), React.createElement(Option, {\n      value: \"87\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"+87\")));\n    const websiteOptions = autoCompleteResult.map(website => React.createElement(AutoCompleteOption, {\n      key: website,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, website));\n    return React.createElement(Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      label: \"E-mail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        type: 'email',\n        message: 'The input is not valid E-mail!'\n      }, {\n        required: true,\n        message: 'Please input your E-mail!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Confirm Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: 'Please confirm your password!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"Nickname\\xA0\", React.createElement(Tooltip, {\n        title: \"What do you want others to call you?\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        type: \"question-circle-o\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, getFieldDecorator('nickname', {\n      rules: [{\n        required: true,\n        message: 'Please input your nickname!',\n        whitespace: true\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Habitual Residence\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, getFieldDecorator('residence', {\n      initialValue: ['zhejiang', 'hangzhou', 'xihu'],\n      rules: [{\n        type: 'array',\n        required: true,\n        message: 'Please select your habitual residence!'\n      }]\n    })(React.createElement(Cascader, {\n      options: residences,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Phone Number\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, getFieldDecorator('phone', {\n      rules: [{\n        required: true,\n        message: 'Please input your phone number!'\n      }]\n    })(React.createElement(Input, {\n      addonBefore: prefixSelector,\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Website\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, getFieldDecorator('website', {\n      rules: [{\n        required: true,\n        message: 'Please input website!'\n      }]\n    })(React.createElement(AutoComplete, {\n      dataSource: websiteOptions,\n      onChange: this.handleWebsiteChange,\n      placeholder: \"website\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    })))), React.createElement(Form.Item, {\n      label: \"Captcha\",\n      extra: \"We must make sure that your are a human.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(Row, {\n      gutter: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, getFieldDecorator('captcha', {\n      rules: [{\n        required: true,\n        message: 'Please input the captcha you got!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }))), React.createElement(Col, {\n      span: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"Get captcha\")))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }), getFieldDecorator('agreement', {\n      valuePropName: 'checked'\n    })(React.createElement(Checkbox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"I have read the \", React.createElement(\"a\", {\n      href: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, \"agreement\")))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, \"Register\")));\n  }\n\n}\n\nconst WrappedRegistrationForm = Form.create({\n  name: 'register'\n})(RegistrationForm);","map":{"version":3,"sources":["E:/react-antd/frontend/src/views/Setting/components/FormSettingView/FormSettingView.js"],"names":["React","Form","Input","Tooltip","Icon","Cascader","Select","Row","Col","Checkbox","Button","AutoComplete","Option","AutoCompleteOption","residences","value","label","children","RegistrationForm","Component","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","console","log","handleConfirmBlur","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","handleWebsiteChange","map","domain","render","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","prefixSelector","initialValue","width","websiteOptions","website","rules","type","message","required","validator","whitespace","valuePropName","WrappedRegistrationForm","create","name"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n    Form,\r\n    Input,\r\n    Tooltip,\r\n    Icon,\r\n    Cascader,\r\n    Select,\r\n    Row,\r\n    Col,\r\n    Checkbox,\r\n    Button,\r\n    AutoComplete,\r\n  } from 'antd';\r\n  \r\n  const { Option } = Select;\r\n  const AutoCompleteOption = AutoComplete.Option;\r\n  \r\n  const residences = [\r\n    {\r\n      value: 'zhejiang',\r\n      label: 'Zhejiang',\r\n      children: [\r\n        {\r\n          value: 'hangzhou',\r\n          label: 'Hangzhou',\r\n          children: [\r\n            {\r\n              value: 'xihu',\r\n              label: 'West Lake',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      value: 'jiangsu',\r\n      label: 'Jiangsu',\r\n      children: [\r\n        {\r\n          value: 'nanjing',\r\n          label: 'Nanjing',\r\n          children: [\r\n            {\r\n              value: 'zhonghuamen',\r\n              label: 'Zhong Hua Men',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n  \r\n  class RegistrationForm extends React.Component {\r\n    state = {\r\n      confirmDirty: false,\r\n      autoCompleteResult: [],\r\n    };\r\n  \r\n    handleSubmit = e => {\r\n      e.preventDefault();\r\n      this.props.form.validateFieldsAndScroll((err, values) => {\r\n        if (!err) {\r\n          console.log('Received values of form: ', values);\r\n        }\r\n      });\r\n    };\r\n  \r\n    handleConfirmBlur = e => {\r\n      const { value } = e.target;\r\n      this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n    };\r\n  \r\n    compareToFirstPassword = (rule, value, callback) => {\r\n      const { form } = this.props;\r\n      if (value && value !== form.getFieldValue('password')) {\r\n        callback('Two passwords that you enter is inconsistent!');\r\n      } else {\r\n        callback();\r\n      }\r\n    };\r\n  \r\n    validateToNextPassword = (rule, value, callback) => {\r\n      const { form } = this.props;\r\n      if (value && this.state.confirmDirty) {\r\n        form.validateFields(['confirm'], { force: true });\r\n      }\r\n      callback();\r\n    };\r\n  \r\n    handleWebsiteChange = value => {\r\n      let autoCompleteResult;\r\n      if (!value) {\r\n        autoCompleteResult = [];\r\n      } else {\r\n        autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\r\n      }\r\n      this.setState({ autoCompleteResult });\r\n    };\r\n  \r\n    render() {\r\n      const { getFieldDecorator } = this.props.form;\r\n      const { autoCompleteResult } = this.state;\r\n  \r\n      const formItemLayout = {\r\n        labelCol: {\r\n          xs: { span: 24 },\r\n          sm: { span: 8 },\r\n        },\r\n        wrapperCol: {\r\n          xs: { span: 24 },\r\n          sm: { span: 16 },\r\n        },\r\n      };\r\n      const tailFormItemLayout = {\r\n        wrapperCol: {\r\n          xs: {\r\n            span: 24,\r\n            offset: 0,\r\n          },\r\n          sm: {\r\n            span: 16,\r\n            offset: 8,\r\n          },\r\n        },\r\n      };\r\n      const prefixSelector = getFieldDecorator('prefix', {\r\n        initialValue: '86',\r\n      })(\r\n        <Select style={{ width: 70 }}>\r\n          <Option value=\"86\">+86</Option>\r\n          <Option value=\"87\">+87</Option>\r\n        </Select>,\r\n      );\r\n  \r\n      const websiteOptions = autoCompleteResult.map(website => (\r\n        <AutoCompleteOption key={website}>{website}</AutoCompleteOption>\r\n      ));\r\n  \r\n      return (\r\n        <Form {...formItemLayout} onSubmit={this.handleSubmit}>\r\n          <Form.Item label=\"E-mail\">\r\n            {getFieldDecorator('email', {\r\n              rules: [\r\n                {\r\n                  type: 'email',\r\n                  message: 'The input is not valid E-mail!',\r\n                },\r\n                {\r\n                  required: true,\r\n                  message: 'Please input your E-mail!',\r\n                },\r\n              ],\r\n            })(<Input />)}\r\n          </Form.Item>\r\n          <Form.Item label=\"Password\" hasFeedback>\r\n            {getFieldDecorator('password', {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: 'Please input your password!',\r\n                },\r\n                {\r\n                  validator: this.validateToNextPassword,\r\n                },\r\n              ],\r\n            })(<Input.Password />)}\r\n          </Form.Item>\r\n          <Form.Item label=\"Confirm Password\" hasFeedback>\r\n            {getFieldDecorator('confirm', {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: 'Please confirm your password!',\r\n                },\r\n                {\r\n                  validator: this.compareToFirstPassword,\r\n                },\r\n              ],\r\n            })(<Input.Password onBlur={this.handleConfirmBlur} />)}\r\n          </Form.Item>\r\n          <Form.Item\r\n            label={\r\n              <span>\r\n                Nickname&nbsp;\r\n                <Tooltip title=\"What do you want others to call you?\">\r\n                  <Icon type=\"question-circle-o\" />\r\n                </Tooltip>\r\n              </span>\r\n            }\r\n          >\r\n            {getFieldDecorator('nickname', {\r\n              rules: [{ required: true, message: 'Please input your nickname!', whitespace: true }],\r\n            })(<Input />)}\r\n          </Form.Item>\r\n          <Form.Item label=\"Habitual Residence\">\r\n            {getFieldDecorator('residence', {\r\n              initialValue: ['zhejiang', 'hangzhou', 'xihu'],\r\n              rules: [\r\n                { type: 'array', required: true, message: 'Please select your habitual residence!' },\r\n              ],\r\n            })(<Cascader options={residences} />)}\r\n          </Form.Item>\r\n          <Form.Item label=\"Phone Number\">\r\n            {getFieldDecorator('phone', {\r\n              rules: [{ required: true, message: 'Please input your phone number!' }],\r\n            })(<Input addonBefore={prefixSelector} style={{ width: '100%' }} />)}\r\n          </Form.Item>\r\n          <Form.Item label=\"Website\">\r\n            {getFieldDecorator('website', {\r\n              rules: [{ required: true, message: 'Please input website!' }],\r\n            })(\r\n              <AutoComplete\r\n                dataSource={websiteOptions}\r\n                onChange={this.handleWebsiteChange}\r\n                placeholder=\"website\"\r\n              >\r\n                <Input />\r\n              </AutoComplete>,\r\n            )}\r\n          </Form.Item>\r\n          <Form.Item label=\"Captcha\" extra=\"We must make sure that your are a human.\">\r\n            <Row gutter={8}>\r\n              <Col span={12}>\r\n                {getFieldDecorator('captcha', {\r\n                  rules: [{ required: true, message: 'Please input the captcha you got!' }],\r\n                })(<Input />)}\r\n              </Col>\r\n              <Col span={12}>\r\n                <Button>Get captcha</Button>\r\n              </Col>\r\n            </Row>\r\n          </Form.Item>\r\n          <Form.Item {...tailFormItemLayout}>\r\n            {getFieldDecorator('agreement', {\r\n              valuePropName: 'checked',\r\n            })(\r\n              <Checkbox>\r\n                I have read the <a href=\"\">agreement</a>\r\n              </Checkbox>,\r\n            )}\r\n          </Form.Item>\r\n          <Form.Item {...tailFormItemLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Register\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      );\r\n    }\r\n  }\r\n  \r\n  const WrappedRegistrationForm = Form.create({ name: 'register' })(RegistrationForm);\r\n  "]},"metadata":{},"sourceType":"module"}