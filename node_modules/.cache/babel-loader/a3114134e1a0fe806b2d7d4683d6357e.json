{"ast":null,"code":"var _jsxFileName = \"E:\\\\web_ungdung\\\\frontend\\\\src\\\\components\\\\NoticeView\\\\NoticeView.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Tag, message } from 'antd';\nimport moment from 'moment';\nimport NoticeIcon from './NoticeIcon';\nconst data = [{\n  title: 'test',\n  avatar: 'https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png',\n  description: 'description description description descriptiondescription description description description',\n  datetime: moment.now()\n}, {\n  title: 'test',\n  avatar: 'https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png',\n  description: 'description description description descriptiondescription description description description',\n  datetime: moment.now()\n}];\nexport default function NoticeView(props) {\n  const [loadingNotice, setLoadingNotice] = useState(true);\n  useEffect(() => {\n    const fetchingNotices = () => {\n      console.log('sss');\n      setTimeout(() => {\n        setLoadingNotice(false);\n      }, 5000);\n    };\n\n    fetchingNotices();\n  });\n\n  const handleNoticeClear = (title, key) => {\n    message.success(`${'清空了'} ${title}`);\n  };\n\n  const getUnreadData = noticeData => {\n    const unreadMsg = {};\n    Object.keys(noticeData).forEach(key => {\n      const value = noticeData[key];\n\n      if (!unreadMsg[key]) {\n        unreadMsg[key] = 0;\n      }\n\n      if (Array.isArray(value)) {\n        unreadMsg[key] = value.filter(item => !item.read).length;\n      }\n    });\n    return unreadMsg;\n  };\n\n  const unreadMsg = getUnreadData(data);\n  return React.createElement(NoticeIcon, {\n    className: \"action\" // count={currentUser && currentUser.unreadCount}\n    ,\n    onItemClick: item => {},\n    loading: loadingNotice,\n    clearText: \"\\u6E05\\u7A7A\",\n    viewMoreText: \"\\u67E5\\u770B\\u66F4\\u591A\",\n    onClear: handleNoticeClear //onPopupVisibleChange={onNoticeVisibleChange}\n    ,\n    onViewMore: () => message.info('Click on view more'),\n    clearClose: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(NoticeIcon.Tab, {\n    tabKey: \"notification\" // count={unreadMsg.notification}\n    ,\n    count: 4,\n    list: data,\n    title: \"\\u901A\\u77E5\",\n    emptyText: \"\\u4F60\\u5DF2\\u67E5\\u770B\\u6240\\u6709\\u901A\\u77E5\",\n    showViewMore: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(NoticeIcon.Tab, {\n    tabKey: \"message\" //count={unreadMsg.message}\n    ,\n    count: 4,\n    list: data,\n    title: \"\\u6D88\\u606F\",\n    emptyText: \"\\u60A8\\u5DF2\\u8BFB\\u5B8C\\u6240\\u6709\\u6D88\\u606F\",\n    showViewMore: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), React.createElement(NoticeIcon.Tab, {\n    tabKey: \"event\",\n    title: \"\\u5F85\\u529E\",\n    emptyText: \"\\u4F60\\u5DF2\\u5B8C\\u6210\\u6240\\u6709\\u5F85\\u529E\",\n    count: 4 //count={unreadMsg.event}\n    ,\n    list: data,\n    showViewMore: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["E:/web_ungdung/frontend/src/components/NoticeView/NoticeView.js"],"names":["React","useEffect","useState","Tag","message","moment","NoticeIcon","data","title","avatar","description","datetime","now","NoticeView","props","loadingNotice","setLoadingNotice","fetchingNotices","console","log","setTimeout","handleNoticeClear","key","success","getUnreadData","noticeData","unreadMsg","Object","keys","forEach","value","Array","isArray","filter","item","read","length","info"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Tag, message } from 'antd';\r\nimport moment from 'moment';\r\nimport NoticeIcon from './NoticeIcon';\r\n\r\nconst data = [\r\n    {\r\n        title: 'test',\r\n        avatar: 'https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png',\r\n        description: 'description description description descriptiondescription description description description',\r\n        datetime: moment.now()\r\n    },\r\n    {\r\n        title: 'test',\r\n        avatar: 'https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png',\r\n        description: 'description description description descriptiondescription description description description',\r\n        datetime: moment.now()\r\n    }\r\n]\r\n\r\nexport default function NoticeView(props) {\r\n    const [loadingNotice, setLoadingNotice] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const fetchingNotices = () => {\r\n            console.log('sss')\r\n            setTimeout(() => {\r\n                setLoadingNotice(false);\r\n            }, 5000);\r\n        }\r\n        fetchingNotices();\r\n    })\r\n\r\n    const handleNoticeClear = (title, key) => {        \r\n        message.success(`${'清空了'} ${title}`);\r\n    };\r\n    \r\n    const getUnreadData = noticeData => {\r\n        const unreadMsg = {};\r\n        Object.keys(noticeData).forEach(key => {\r\n            const value = noticeData[key];\r\n\r\n            if (!unreadMsg[key]) {\r\n                unreadMsg[key] = 0;\r\n            }\r\n\r\n            if (Array.isArray(value)) {\r\n                unreadMsg[key] = value.filter(item => !item.read).length;\r\n            }\r\n        });\r\n        return unreadMsg;\r\n    };\r\n\r\n    const unreadMsg = getUnreadData(data);\r\n\r\n    return (\r\n        <NoticeIcon\r\n            className='action'\r\n            // count={currentUser && currentUser.unreadCount}\r\n            onItemClick={item => {\r\n                \r\n            }}\r\n            loading={loadingNotice}\r\n            clearText=\"清空\"\r\n            viewMoreText=\"查看更多\"\r\n            onClear={handleNoticeClear}\r\n            //onPopupVisibleChange={onNoticeVisibleChange}\r\n            onViewMore={() => message.info('Click on view more')}\r\n            clearClose\r\n        >\r\n            <NoticeIcon.Tab\r\n                tabKey=\"notification\"\r\n                // count={unreadMsg.notification}\r\n                count={4}\r\n                list={data}\r\n                title=\"通知\"\r\n                emptyText=\"你已查看所有通知\"\r\n                showViewMore\r\n            />\r\n            <NoticeIcon.Tab\r\n                tabKey=\"message\"\r\n                //count={unreadMsg.message}\r\n                count={4}\r\n                list={data}\r\n                title=\"消息\"\r\n                emptyText=\"您已读完所有消息\"\r\n                showViewMore\r\n            />\r\n            <NoticeIcon.Tab\r\n                tabKey=\"event\"\r\n                title=\"待办\"\r\n                emptyText=\"你已完成所有待办\"\r\n                count={4}\r\n                //count={unreadMsg.event}\r\n                list={data}\r\n                showViewMore\r\n            />\r\n        </NoticeIcon>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}