{"ast":null,"code":"var _jsxFileName = \"E:\\\\react-antd\\\\frontend\\\\src\\\\views\\\\Home\\\\Components\\\\ToolWeather\\\\ToolWeather.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Card, Icon, Result } from 'antd';\nimport { ChartCard, MiniArea } from 'ant-design-pro/lib/Charts';\nimport moment from 'moment';\nexport default function ToolWeather(props) {\n  const {\n    geocode,\n    errors\n  } = props;\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    (geocode || errors.message) && setLoading(false);\n  }, [geocode, errors.message]);\n  const visitData = [];\n  const beginDay = new Date().getTime();\n\n  for (let i = 0; i < 20; i += 1) {\n    visitData.push({\n      x: moment(new Date(beginDay + 1000 * 60 * 60 * 24 * i)).format('YYYY-MM-DD'),\n      y: Math.floor(Math.random() * 100) + 10\n    });\n  }\n\n  return React.createElement(Card, {\n    size: \"small\",\n    loading: loading,\n    title: \"Today weather\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, errors.message ? React.createElement(Result, {\n    icon: React.createElement(Icon, {\n      type: \"warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }),\n    title: errors.message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }) : React.createElement(ChartCard, {\n    title: geocode,\n    contentHeight: 282,\n    bordered: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(MiniArea, {\n    line: true,\n    height: 75,\n    data: visitData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["E:/react-antd/frontend/src/views/Home/Components/ToolWeather/ToolWeather.js"],"names":["React","useState","useEffect","Card","Icon","Result","ChartCard","MiniArea","moment","ToolWeather","props","geocode","errors","loading","setLoading","message","visitData","beginDay","Date","getTime","i","push","x","format","y","Math","floor","random"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,MAArB,QAAmC,MAAnC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,2BAApC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AACvC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAsBF,KAA5B;AACA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,IAAD,CAAtC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,KAACS,OAAO,IAAIC,MAAM,CAACG,OAAnB,KAA+BD,UAAU,CAAC,KAAD,CAAzC;AACH,GAFQ,EAEN,CAACH,OAAD,EAAUC,MAAM,CAACG,OAAjB,CAFM,CAAT;AAIA,QAAMC,SAAS,GAAG,EAAlB;AACA,QAAMC,QAAQ,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAjB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,IAAI,CAA7B,EAAgC;AAC5BJ,IAAAA,SAAS,CAACK,IAAV,CAAe;AACXC,MAAAA,CAAC,EAAEd,MAAM,CAAC,IAAIU,IAAJ,CAASD,QAAQ,GAAG,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjB,GAAsBG,CAA1C,CAAD,CAAN,CAAqDG,MAArD,CACC,YADD,CADQ;AAIXC,MAAAA,CAAC,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,IAAkC;AAJ1B,KAAf;AAMH;;AAED,SACI,oBAAC,IAAD;AACI,IAAA,IAAI,EAAC,OADT;AAEI,IAAA,OAAO,EAAEd,OAFb;AAGI,IAAA,KAAK,EAAC,eAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKKD,MAAM,CAACG,OAAP,GACG,oBAAC,MAAD;AACI,IAAA,IAAI,EAAE,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADV;AAEI,IAAA,KAAK,EAAEH,MAAM,CAACG,OAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,GAMG,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAEJ,OAAlB;AAA2B,IAAA,aAAa,EAAE,GAA1C;AAA+C,IAAA,QAAQ,EAAE,KAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AAAU,IAAA,IAAI,MAAd;AAAe,IAAA,MAAM,EAAE,EAAvB;AAA2B,IAAA,IAAI,EAAEK,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAXR,CADJ;AAkBH","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Card, Icon, Result } from 'antd';\r\nimport { ChartCard, MiniArea } from 'ant-design-pro/lib/Charts';\r\nimport moment from 'moment';\r\n\r\nexport default function ToolWeather(props) {\r\n    const { geocode, errors } = props;\r\n    const [loading, setLoading] = useState(true);\r\n    useEffect(() => {\r\n        (geocode || errors.message) && setLoading(false);\r\n    }, [geocode, errors.message]);\r\n\r\n    const visitData = [];\r\n    const beginDay = new Date().getTime();\r\n    for (let i = 0; i < 20; i += 1) {\r\n        visitData.push({\r\n            x: moment(new Date(beginDay + 1000 * 60 * 60 * 24 * i)).format(\r\n                'YYYY-MM-DD'\r\n            ),\r\n            y: Math.floor(Math.random() * 100) + 10\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            size=\"small\"\r\n            loading={loading}\r\n            title=\"Today weather\"\r\n        >\r\n            {errors.message ? (\r\n                <Result\r\n                    icon={<Icon type=\"warning\" />}\r\n                    title={errors.message}\r\n                />\r\n            ) : (\r\n                <ChartCard title={geocode} contentHeight={282} bordered={false}>\r\n                    <MiniArea line height={75} data={visitData} />\r\n                </ChartCard>\r\n            )}\r\n        </Card>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}