{"ast":null,"code":"var _jsxFileName = \"E:\\\\react-antd\\\\frontend\\\\src\\\\views\\\\Setting\\\\components\\\\GeographicView\\\\GeographicView.js\";\nimport React, { forwardRef, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Spin, Select, Row, Col } from 'antd';\nimport allActions from './../../../../actions';\nimport './styles.css';\nconst {\n  Option\n} = Select;\nconst nullSelectItem = {\n  label: '',\n  key: ''\n}; // const province = [\n//     {\n//         id: 1,\n//         name: 'Binh dinh'\n//     },\n//     {\n//         id: 2,\n//         name: 'Son la'\n//     }\n// ]\n// const city = [\n//     {\n//         id: 1,\n//         name: 'Quy nhon'\n//     },\n//     {\n//         id: 2,\n//         name: 'Tp Son la'\n//     }\n// ]\n\nconst GeographicView = forwardRef((props, ref) => {\n  const [loading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(allActions.geocodeActions.getProvinces());\n  }, []);\n  const provinces = useSelector(state => state.provincesReducer.provinces);\n\n  const getProvinceOption = () => {\n    if (provinces) {\n      return getOption(provinces);\n    }\n\n    return [];\n  }; // const getCityOption = () => {\n  //     // const { city } = props;\n  //     if (city) {\n  //         return getOption(city);\n  //     }\n  //     return [];\n  // };\n\n\n  const getOption = list => {\n    if (!list || list.length < 1) {\n      return React.createElement(Option, {\n        key: 0,\n        value: 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"\\u6CA1\\u6709\\u627E\\u5230\\u9009\\u9879\");\n    }\n\n    return list.map(item => React.createElement(Option, {\n      key: item.id,\n      value: item.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, item.name));\n  };\n\n  const selectProvinceItem = item => {\n    const {\n      dispatch,\n      onChange\n    } = props; // if (dispatch) {\n    //     dispatch({\n    //         type: 'accountAndsettings/fetchCity',\n    //         payload: item.key\n    //     });\n    // }\n    // if (onChange) {\n    //     onChange({\n    //         province: item,\n    //         city: nullSelectItem\n    //     });\n    // }\n  };\n\n  const selectCityItem = item => {\n    const {\n      value,\n      onChange\n    } = props; // if (value && onChange) {\n    //     onChange({\n    //         province: value.province,\n    //         city: item\n    //     });\n    // }\n  };\n\n  return React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(Col, {\n    xl: 24,\n    lg: 24,\n    md: 24,\n    sm: 24,\n    xs: 24,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(Spin, {\n    spinning: loading,\n    wrapperClassName: \"row\",\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(Select, {\n    className: \"item\",\n    value: \"province\",\n    showSearch: true,\n    onSelect: selectProvinceItem,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, getProvinceOption()))));\n});\nexport default GeographicView;","map":{"version":3,"sources":["E:/react-antd/frontend/src/views/Setting/components/GeographicView/GeographicView.js"],"names":["React","forwardRef","useState","useEffect","useSelector","useDispatch","Spin","Select","Row","Col","allActions","Option","nullSelectItem","label","key","GeographicView","props","ref","loading","setLoading","dispatch","geocodeActions","getProvinces","provinces","state","provincesReducer","getProvinceOption","getOption","list","length","map","item","id","name","selectProvinceItem","onChange","selectCityItem","value"],"mappings":"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","sourcesContent":["import React, { forwardRef, useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Spin, Select, Row, Col } from 'antd';\r\nimport allActions from './../../../../actions';\r\nimport './styles.css';\r\nconst { Option } = Select;\r\nconst nullSelectItem = {\r\n    label: '',\r\n    key: ''\r\n};\r\n// const province = [\r\n//     {\r\n//         id: 1,\r\n//         name: 'Binh dinh'\r\n//     },\r\n//     {\r\n//         id: 2,\r\n//         name: 'Son la'\r\n//     }\r\n// ]\r\n// const city = [\r\n//     {\r\n//         id: 1,\r\n//         name: 'Quy nhon'\r\n//     },\r\n//     {\r\n//         id: 2,\r\n//         name: 'Tp Son la'\r\n//     }\r\n// ]\r\nconst GeographicView = forwardRef((props, ref) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(allActions.geocodeActions.getProvinces());\r\n    }, []);\r\n    const provinces = useSelector(state => state.provincesReducer.provinces);\r\n\r\n    const getProvinceOption = () => {\r\n        if (provinces) {\r\n            return getOption(provinces);\r\n        }\r\n        return [];\r\n    };\r\n    // const getCityOption = () => {\r\n    //     // const { city } = props;\r\n    //     if (city) {\r\n    //         return getOption(city);\r\n    //     }\r\n    //     return [];\r\n    // };\r\n    const getOption = list => {\r\n        if (!list || list.length < 1) {\r\n            return (\r\n                <Option key={0} value={0}>\r\n                    没有找到选项\r\n                </Option>\r\n            );\r\n        }\r\n        return list.map(item => (\r\n            <Option key={item.id} value={item.name}>\r\n                {item.name}\r\n            </Option>\r\n        ));\r\n    };\r\n    const selectProvinceItem = item => {\r\n        \r\n        const { dispatch, onChange } = props;\r\n\r\n        // if (dispatch) {\r\n        //     dispatch({\r\n        //         type: 'accountAndsettings/fetchCity',\r\n        //         payload: item.key\r\n        //     });\r\n        // }\r\n\r\n        // if (onChange) {\r\n        //     onChange({\r\n        //         province: item,\r\n        //         city: nullSelectItem\r\n        //     });\r\n        // }\r\n    };\r\n    const selectCityItem = item => {\r\n        const { value, onChange } = props;\r\n\r\n        // if (value && onChange) {\r\n        //     onChange({\r\n        //         province: value.province,\r\n        //         city: item\r\n        //     });\r\n        // }\r\n    };\r\n\r\n    return (\r\n        <Row>\r\n            <Col xl={24} lg={24} md={24} sm={24} xs={24}>\r\n                <Spin spinning={loading} wrapperClassName=\"row\" size=\"small\">\r\n                    <Select\r\n                        className=\"item\"\r\n                        value=\"province\"\r\n                        showSearch\r\n                        onSelect={selectProvinceItem}\r\n                    >\r\n                        {getProvinceOption()}\r\n                    </Select>\r\n                    {/* <Select\r\n                        className=\"item\"\r\n                        value=\"city\"\r\n                        showSearch\r\n                        onSelect={selectCityItem}\r\n                    >\r\n                        {getCityOption()}\r\n                    </Select> */}\r\n                </Spin>\r\n            </Col>\r\n        </Row>\r\n    );\r\n});\r\n\r\nexport default GeographicView;\r\n"]},"metadata":{},"sourceType":"module"}