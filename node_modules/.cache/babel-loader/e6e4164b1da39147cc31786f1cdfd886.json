{"ast":null,"code":"var _jsxFileName = \"E:\\\\web_ungdung\\\\frontend\\\\src\\\\views\\\\Login\\\\Login.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { GridContent } from '@ant-design/pro-layout';\nimport { Divider, Row, Col, Icon, Button, Form, Input } from 'antd';\nimport { formatMessage, FormattedMessage } from 'umi-plugin-react/locale';\nimport { login } from './../../actions';\nimport { AlertErrors } from './../../components';\nimport './styles.css';\n\nfunction LoginForm(props) {\n  const {\n    auth,\n    login,\n    errors,\n    history\n  } = props;\n  const {\n    getFieldDecorator\n  } = props.form;\n  const [iconLoading, setIconLoading] = useState(false);\n  const [notice, setNotice] = useState('');\n  useEffect(() => {\n    setNotice(errors.message);\n  }, [errors]);\n  useEffect(() => {\n    setIconLoading(false);\n  }, [auth, errors]);\n  useEffect(() => {\n    setNotice('');\n  }, [auth]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setNotice('');\n    props.form.validateFields((err, values) => {\n      if (!err) {\n        setIconLoading(true);\n        login(values.email, values.password, history);\n      }\n    });\n  };\n\n  const validate = (rule, value, callback) => {\n    const {\n      form\n    } = props;\n\n    if (value) {\n      form.validateFields(['confirm'], {\n        force: true\n      });\n    }\n\n    callback();\n  };\n\n  return React.createElement(GridContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(Row, {\n    type: \"flex\",\n    justify: \"center\",\n    align: \"middle\",\n    style: {\n      minHeight: '100vh'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(Col, {\n    lg: 7,\n    md: 10,\n    sm: 15,\n    xs: 20,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Form, {\n    onSubmit: handleSubmit,\n    className: \"login-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    className: \"icon-login\",\n    type: \"login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    style: {\n      color: '#08c'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"login.login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }))), notice && React.createElement(AlertErrors, {\n    message: notice,\n    type: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), React.createElement(Form.Item, {\n    hasFeedback: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, getFieldDecorator('email', {\n    rules: [{\n      type: 'email',\n      message: 'The input is not valid E-mail!'\n    }, {\n      required: true,\n      message: 'Please input your Email!'\n    }, {\n      validator: validate\n    }]\n  })(React.createElement(Input, {\n    allowClear: true,\n    prefix: React.createElement(Icon, {\n      type: \"user\",\n      style: {\n        color: 'rgba(0,0,0,.25)'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }),\n    placeholder: formatMessage({\n      id: 'login.email'\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }))), React.createElement(Form.Item, {\n    hasFeedback: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, getFieldDecorator('password', {\n    rules: [{\n      required: true,\n      message: 'Please input your Password!'\n    }, {\n      validator: validate\n    }, {\n      min: 6,\n      message: 'Password at least 6 characters'\n    }]\n  })(React.createElement(Input.Password, {\n    prefix: React.createElement(Icon, {\n      type: \"lock\",\n      style: {\n        color: 'rgba(0,0,0,.25)'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }),\n    allowClear: true,\n    type: \"password\",\n    placeholder: formatMessage({\n      id: 'login.password'\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }))), React.createElement(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    className: \"login-form-button\",\n    icon: \"login\",\n    loading: iconLoading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"login.login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"login.loginMethod\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }), React.createElement(Button, {\n    className: \"btn-google\",\n    type: \"dashed\",\n    shape: \"circle\",\n    icon: \"google\",\n    size: \"default\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"dashed\",\n    shape: \"circle\",\n    icon: \"facebook\",\n    size: \"default\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }), React.createElement(Button, {\n    className: \"btn-register\",\n    type: \"link\",\n    href: \"foo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(FormattedMessage, {\n    id: \"login.register\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }))))))));\n}\n\nconst SignIn = Form.create({\n  name: 'login'\n})(LoginForm);\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps, {\n  login\n})(SignIn);","map":{"version":3,"sources":["E:/web_ungdung/frontend/src/views/Login/Login.js"],"names":["React","useState","useEffect","connect","GridContent","Divider","Row","Col","Icon","Button","Form","Input","formatMessage","FormattedMessage","login","AlertErrors","LoginForm","props","auth","errors","history","getFieldDecorator","form","iconLoading","setIconLoading","notice","setNotice","message","handleSubmit","e","preventDefault","validateFields","err","values","email","password","validate","rule","value","callback","force","minHeight","color","rules","type","required","validator","id","min","SignIn","create","name","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { GridContent } from '@ant-design/pro-layout';\r\nimport { Divider, Row, Col, Icon, Button, Form, Input } from 'antd';\r\nimport { formatMessage, FormattedMessage } from 'umi-plugin-react/locale';\r\n\r\nimport { login } from './../../actions';\r\nimport { AlertErrors } from './../../components';\r\nimport './styles.css';\r\n\r\nfunction LoginForm(props) {\r\n    const { auth, login, errors, history } = props;\r\n    const { getFieldDecorator } = props.form;\r\n\r\n    const [iconLoading, setIconLoading] = useState(false);\r\n    const [notice, setNotice] = useState('');\r\n\r\n    useEffect(() => {\r\n        setNotice(errors.message);\r\n    }, [errors]);\r\n    useEffect(() => {\r\n        setIconLoading(false);\r\n    }, [auth, errors]);\r\n    useEffect(() => {\r\n        setNotice('');\r\n    }, [auth]);\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        setNotice('');\r\n        props.form.validateFields((err, values) => {\r\n            if (!err) {   \r\n                setIconLoading(true);\r\n                login(values.email, values.password, history);\r\n            }\r\n        });\r\n    };\r\n    const validate = (rule, value, callback) => {\r\n        const { form } = props;\r\n        if (value) {\r\n            form.validateFields(['confirm'], { force: true });\r\n        }\r\n        callback();\r\n    };\r\n\r\n    return (\r\n        <GridContent>\r\n            <Row\r\n                type=\"flex\"\r\n                justify=\"center\"\r\n                align=\"middle\"\r\n                style={{ minHeight: '100vh' }}\r\n            >\r\n                <Col lg={7} md={10} sm={15} xs={20}>\r\n                    <Form onSubmit={handleSubmit} className=\"login-form\">\r\n                        <Divider>\r\n                            <Icon\r\n                                className='icon-login'\r\n                                type=\"login\"\r\n                            />\r\n                            <span style={{ color: '#08c' }}><FormattedMessage id='login.login' /></span>\r\n                        </Divider>\r\n                        {notice && <AlertErrors message={notice} type=\"error\" />}\r\n                        <Form.Item hasFeedback>\r\n                            {getFieldDecorator('email', {\r\n                                rules: [\r\n                                    {\r\n                                        type: 'email',\r\n                                        message:\r\n                                            'The input is not valid E-mail!'\r\n                                    },\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Please input your Email!'\r\n                                    },\r\n                                    {\r\n                                        validator: validate\r\n                                    }\r\n                                ]\r\n                            })(\r\n                                <Input\r\n                                    allowClear\r\n                                    prefix={\r\n                                        <Icon\r\n                                            type=\"user\"\r\n                                            style={{ color: 'rgba(0,0,0,.25)' }}\r\n                                        />\r\n                                    }\r\n                                    placeholder={formatMessage({id: 'login.email'})}\r\n                                />\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item hasFeedback>\r\n                            {getFieldDecorator('password', {\r\n                                rules: [\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Please input your Password!'\r\n                                    },\r\n                                    {\r\n                                        validator: validate\r\n                                    },\r\n                                    {\r\n                                        min: 6,\r\n                                        message:\r\n                                            'Password at least 6 characters'\r\n                                    }\r\n                                ]\r\n                            })(\r\n                                <Input.Password\r\n                                    prefix={\r\n                                        <Icon\r\n                                            type=\"lock\"\r\n                                            style={{ color: 'rgba(0,0,0,.25)' }}\r\n                                        />\r\n                                    }\r\n                                    allowClear\r\n                                    type=\"password\"\r\n                                    placeholder={formatMessage({id: 'login.password'})}\r\n                                />\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                className=\"login-form-button\"\r\n                                icon=\"login\"\r\n                                loading={iconLoading}\r\n                            >\r\n                                <FormattedMessage id='login.login' />\r\n                            </Button>\r\n                            <div>\r\n                                <FormattedMessage id='login.loginMethod' />\r\n                                <Button\r\n                                    className=\"btn-google\"\r\n                                    type=\"dashed\"\r\n                                    shape=\"circle\"\r\n                                    icon=\"google\"\r\n                                    size=\"default\"\r\n                                />\r\n                                <Button\r\n                                    type=\"dashed\"\r\n                                    shape=\"circle\"\r\n                                    icon=\"facebook\"\r\n                                    size=\"default\"\r\n                                />\r\n                                <Button\r\n                                    className=\"btn-register\"\r\n                                    type=\"link\"\r\n                                    href=\"foo\"\r\n                                >\r\n                                    <FormattedMessage id='login.register' />\r\n                                </Button>\r\n                            </div>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        </GridContent>\r\n    );\r\n}\r\nconst SignIn = Form.create({ name: 'login' })(LoginForm);\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.auth,\r\n    errors: state.errors\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { login }\r\n)(SignIn);\r\n"]},"metadata":{},"sourceType":"module"}