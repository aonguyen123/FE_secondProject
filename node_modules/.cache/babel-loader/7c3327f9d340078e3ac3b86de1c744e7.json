{"ast":null,"code":"import \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\nimport \"antd/es/menu/style\";\nimport _Menu from \"antd/es/menu\";\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport './index.less';\nimport React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport useMergeValue from 'use-merge-value';\nimport warning from 'warning';\nimport defaultSettings from '../defaultSettings';\nimport { getSelectedMenuKeys } from './SiderMenuUtils';\nimport { isUrl, getOpenKeysFromMenuData } from '../utils/utils';\nimport MenuCounter from './Counter';\nvar firstConsole = true;\nvar SubMenu = _Menu.SubMenu;\n\nvar IconFont = _Icon.createFromIconfontCN({\n  scriptUrl: defaultSettings.iconfontUrl\n}); // Allow menu.js config icon as string or ReactNode\n//   icon: 'setting',\n//   icon: 'icon-geren' #For Iconfont ,\n//   icon: 'http://demo.com/icon.png',\n//   icon: '/favicon.png',\n//   icon: <Icon type=\"setting\" />,\n\n\nvar getIcon = function getIcon(icon) {\n  if (typeof icon === 'string' && icon !== '') {\n    if (isUrl(icon)) {\n      return React.createElement(_Icon, {\n        component: function component() {\n          return React.createElement(\"img\", {\n            src: icon,\n            alt: \"icon\",\n            className: \"ant-pro-sider-menu-icon\"\n          });\n        }\n      });\n    }\n\n    if (icon.startsWith('icon-')) {\n      return React.createElement(IconFont, {\n        type: icon\n      });\n    }\n\n    if (firstConsole) {\n      warning(false, \"In order to ensure compatibility with antd@4, we will delete the configuration icon in the next version, details can be viewed.\\n\\u4E3A\\u4E86\\u517C\\u5BB9 antd@4\\uFF0C\\u6211\\u4EEC\\u4F1A\\u5728\\u4E0B\\u4E2A\\u7248\\u672C\\u5220\\u9664\\u914D\\u7F6E icon: string \\u751F\\u6210icon\\u7684\\u7528\\u6CD5\\u3002\\u8BF7\\u67E5\\u770B\\nhttps://pro.ant.design/blog/antd-4.0-cn \\u5BFB\\u627E\\u89E3\\u51B3\\u65B9\\u5F0F\\uFF01\");\n      firstConsole = false;\n    }\n\n    return React.createElement(_Icon, {\n      type: icon\n    });\n  }\n\n  return icon;\n};\n\nvar MenuUtil = function MenuUtil(props) {\n  var _this = this;\n\n  _classCallCheck(this, MenuUtil);\n\n  this.getNavMenuItems = function () {\n    var menusData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return menusData.filter(function (item) {\n      return item.name && !item.hideInMenu;\n    }).map(function (item) {\n      return _this.getSubMenuOrItem(item);\n    }).filter(function (item) {\n      return item;\n    });\n  };\n  /**\n   * get SubMenu or Item\n   */\n\n\n  this.getSubMenuOrItem = function (item) {\n    if (Array.isArray(item.children) && !item.hideChildrenInMenu && item.children.some(function (child) {\n      return child && !!child.name;\n    })) {\n      var name = _this.getIntlName(item);\n\n      var subMenuItemRender = _this.props.subMenuItemRender; //  get defaultTitle by menuItemRender\n\n      var defaultTitle = item.icon ? React.createElement(\"span\", null, getIcon(item.icon), React.createElement(\"span\", null, name)) : name; // subMenu only title render\n\n      var title = subMenuItemRender ? subMenuItemRender(Object.assign(Object.assign({}, item), {\n        isUrl: false\n      }), defaultTitle) : defaultTitle;\n      return React.createElement(SubMenu, {\n        title: title,\n        key: item.key || item.path,\n        onTitleClick: item.onTitleClick\n      }, _this.getNavMenuItems(item.children));\n    }\n\n    return React.createElement(_Menu.Item, {\n      key: item.key || item.path\n    }, _this.getMenuItemPath(item));\n  };\n\n  this.getIntlName = function (item) {\n    var name = item.name,\n        locale = item.locale;\n    var _this$props = _this.props,\n        _this$props$menu = _this$props.menu,\n        menu = _this$props$menu === void 0 ? {\n      locale: false\n    } : _this$props$menu,\n        formatMessage = _this$props.formatMessage;\n\n    if (locale && menu.locale !== false && formatMessage) {\n      return formatMessage({\n        id: locale,\n        defaultMessage: name\n      });\n    }\n\n    return name;\n  };\n  /**\n   * 判断是否是http链接.返回 Link 或 a\n   * Judge whether it is http link.return a or Link\n   * @memberof SiderMenu\n   */\n\n\n  this.getMenuItemPath = function (item) {\n    var itemPath = _this.conversionPath(item.path || '/');\n\n    var icon = getIcon(item.icon);\n    var _this$props2 = _this.props,\n        _this$props2$location = _this$props2.location,\n        location = _this$props2$location === void 0 ? {\n      pathname: '/'\n    } : _this$props2$location,\n        isMobile = _this$props2.isMobile,\n        onCollapse = _this$props2.onCollapse,\n        menuItemRender = _this$props2.menuItemRender;\n    var target = item.target; // if local is true formatMessage all name。\n\n    var name = _this.getIntlName(item);\n\n    var defaultItem = React.createElement(React.Fragment, null, icon, React.createElement(\"span\", null, name));\n    var isHttpUrl = isUrl(itemPath); // Is it a http link\n\n    if (isHttpUrl) {\n      defaultItem = React.createElement(\"a\", {\n        href: itemPath,\n        target: target\n      }, icon, \" \", React.createElement(\"span\", null, name));\n    }\n\n    if (menuItemRender) {\n      return menuItemRender(Object.assign(Object.assign({}, item), {\n        isUrl: isHttpUrl,\n        itemPath: itemPath,\n        isMobile: isMobile,\n        replace: itemPath === location.pathname,\n        onClick: function onClick() {\n          return onCollapse && onCollapse(true);\n        }\n      }), defaultItem);\n    }\n\n    return defaultItem;\n  };\n\n  this.conversionPath = function (path) {\n    if (path && path.indexOf('http') === 0) {\n      return path;\n    }\n\n    return \"/\".concat(path || '').replace(/\\/+/g, '/');\n  };\n\n  this.props = props;\n};\n/**\n * 生成openKeys 的对象，因为设置了openKeys 就会变成受控，所以需要一个空对象\n * @param BaseMenuProps\n */\n\n\nvar getOpenKeysProps = function getOpenKeysProps() {\n  var openKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      layout = _ref.layout,\n      collapsed = _ref.collapsed;\n\n  var openKeysProps = {};\n\n  if (openKeys && !collapsed && layout === 'sidemenu') {\n    openKeysProps = {\n      openKeys: openKeys\n    };\n  }\n\n  return openKeysProps;\n};\n\nvar BaseMenu = function BaseMenu(props) {\n  var theme = props.theme,\n      mode = props.mode,\n      _props$location = props.location,\n      location = _props$location === void 0 ? {\n    pathname: '/'\n  } : _props$location,\n      className = props.className,\n      handleOpenChange = props.handleOpenChange,\n      style = props.style,\n      menuData = props.menuData,\n      _props$menu = props.menu,\n      menu = _props$menu === void 0 ? {\n    locale: true\n  } : _props$menu,\n      iconfontUrl = props.iconfontUrl,\n      propsSelectedKeys = props.selectedKeys,\n      onSelect = props.onSelect,\n      propsOpenKeys = props.openKeys;\n  var pathname = location.pathname;\n\n  var _MenuCounter$useConta = MenuCounter.useContainer(),\n      flatMenuKeys = _MenuCounter$useConta.flatMenuKeys,\n      flatMenus = _MenuCounter$useConta.flatMenus;\n\n  var _useState = useState(menu.defaultOpenAll),\n      _useState2 = _slicedToArray(_useState, 2),\n      defaultOpenAll = _useState2[0],\n      setDefaultOpenAll = _useState2[1];\n\n  var _useMergeValue = useMergeValue(function () {\n    if (menu.defaultOpenAll) {\n      return getOpenKeysFromMenuData(menuData) || [];\n    }\n\n    if (propsOpenKeys === false) {\n      return false;\n    }\n\n    return [];\n  }, {\n    value: propsOpenKeys === false ? undefined : propsOpenKeys,\n    onChange: handleOpenChange\n  }),\n      _useMergeValue2 = _slicedToArray(_useMergeValue, 2),\n      openKeys = _useMergeValue2[0],\n      setOpenKeys = _useMergeValue2[1];\n\n  useEffect(function () {\n    if (!flatMenus || flatMenuKeys.length === 0) {\n      return;\n    }\n\n    if (menu.defaultOpenAll || propsOpenKeys === false) {\n      return;\n    }\n\n    var keys = getSelectedMenuKeys(location.pathname || '/', flatMenus, flatMenuKeys || []);\n    setOpenKeys(keys);\n  }, [flatMenus, flatMenuKeys.join('-')]);\n\n  var _useMergeValue3 = useMergeValue([], {\n    value: propsSelectedKeys,\n    onChange: onSelect ? function (keys) {\n      if (onSelect && keys) {\n        onSelect(keys);\n      }\n    } : undefined\n  }),\n      _useMergeValue4 = _slicedToArray(_useMergeValue3, 2),\n      selectedKeys = _useMergeValue4[0],\n      setSelectedKeys = _useMergeValue4[1];\n\n  useEffect(function () {\n    // reset IconFont\n    if (iconfontUrl) {\n      IconFont = _Icon.createFromIconfontCN({\n        scriptUrl: iconfontUrl\n      });\n    }\n  }, [iconfontUrl]);\n  useEffect(function () {\n    if (!flatMenus || flatMenuKeys.length === 0) {\n      return function () {\n        return null;\n      };\n    } // if pathname can't match, use the nearest parent's key\n\n\n    var keys = getSelectedMenuKeys(pathname || '/', flatMenus, flatMenuKeys || []);\n    var animationFrameId = requestAnimationFrame(function () {\n      setSelectedKeys(keys);\n\n      if (!defaultOpenAll && propsOpenKeys !== false) {\n        setOpenKeys(keys);\n      } else {\n        setDefaultOpenAll(false);\n      }\n    });\n    return function () {\n      return window.cancelAnimationFrame && window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [pathname, flatMenuKeys.join('-')]);\n  var openKeysProps = getOpenKeysProps(openKeys, props);\n  var cls = classNames(className, {\n    'top-nav-menu': mode === 'horizontal'\n  });\n  var menuUtils = new MenuUtil(props);\n  return React.createElement(_Menu, Object.assign({}, openKeysProps, {\n    key: \"Menu\",\n    mode: mode,\n    theme: theme,\n    selectedKeys: selectedKeys,\n    style: style,\n    className: cls,\n    onOpenChange: setOpenKeys\n  }, props.menuProps), menuUtils.getNavMenuItems(menuData));\n};\n\nexport default BaseMenu;","map":null,"metadata":{},"sourceType":"module"}