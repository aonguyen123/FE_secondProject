{"ast":null,"code":"var _jsxFileName = \"E:\\\\react-antd\\\\frontend\\\\src\\\\views\\\\Setting\\\\components\\\\GeographicView\\\\GeographicView.js\";\nimport React, { forwardRef, useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Spin, Select, Row, Col } from 'antd';\nimport allActions from './../../../../actions';\nimport './styles.css';\nconst {\n  Option\n} = Select;\nconst GeographicView = forwardRef((props, ref) => {\n  const [loadingProvinces, setLoadingProvinces] = useState(true);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(allActions.geocodeActions.getProvinces());\n  }, []);\n  const provinces = useSelector(state => state.provincesReducer.provinces);\n  const districts = useSelector(state => state.provincesReducer.districts);\n\n  const getProvinceOption = () => {\n    if (provinces.length !== 0) {\n      return getOption(provinces);\n    }\n\n    return [];\n  };\n\n  const getDistrictOption = () => {\n    if (districts.length !== 0) {\n      return getOption(districts);\n    }\n\n    return [];\n  };\n\n  const getOption = list => {\n    return list.map(item => React.createElement(Option, {\n      key: item.id,\n      value: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, item.name));\n  };\n\n  const selectProvinceItem = item => {\n    console.log(item); // if (dispatch) {\n    //     dispatch({\n    //         type: 'accountAndsettings/fetchCity',\n    //         payload: item.key\n    //     });\n    // }\n    // if (onChange) {\n    //     onChange({\n    //         province: item,\n    //         city: nullSelectItem\n    //     });\n    // }\n  };\n\n  const selectCityItem = item => {\n    const {\n      value,\n      onChange\n    } = props; // if (value && onChange) {\n    //     onChange({\n    //         province: value.province,\n    //         city: item\n    //     });\n    // }\n  };\n\n  return React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(Col, {\n    xl: 24,\n    lg: 24,\n    md: 24,\n    sm: 24,\n    xs: 24,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(Spin, {\n    spinning: false,\n    wrapperClassName: \"row\",\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Select, {\n    className: \"item\",\n    showSearch: true,\n    onSelect: selectProvinceItem,\n    loading: provinces.length !== 0 ? false : true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, getProvinceOption()), React.createElement(Select, {\n    className: \"item\",\n    showSearch: true,\n    onSelect: selectCityItem,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, getDistrictOption()))));\n});\nexport default GeographicView;","map":{"version":3,"sources":["E:/react-antd/frontend/src/views/Setting/components/GeographicView/GeographicView.js"],"names":["React","forwardRef","useState","useEffect","useSelector","useDispatch","Spin","Select","Row","Col","allActions","Option","GeographicView","props","ref","loadingProvinces","setLoadingProvinces","dispatch","geocodeActions","getProvinces","provinces","state","provincesReducer","districts","getProvinceOption","length","getOption","getDistrictOption","list","map","item","id","name","selectProvinceItem","console","log","selectCityItem","value","onChange"],"mappings":"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","sourcesContent":["import React, { forwardRef, useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Spin, Select, Row, Col } from 'antd';\r\nimport allActions from './../../../../actions';\r\nimport './styles.css';\r\nconst { Option } = Select;\r\n\r\nconst GeographicView = forwardRef((props, ref) => {\r\n    const [loadingProvinces, setLoadingProvinces] = useState(true);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(allActions.geocodeActions.getProvinces());        \r\n    }, []);\r\n    const provinces = useSelector(state => state.provincesReducer.provinces);\r\n    const districts = useSelector(state => state.provincesReducer.districts);\r\n\r\n    const getProvinceOption = () => {\r\n        if (provinces.length !== 0) {\r\n            return getOption(provinces);\r\n        }\r\n        return [];\r\n    };\r\n    const getDistrictOption = () => {\r\n        if (districts.length !== 0) {\r\n            return getOption(districts);\r\n        }\r\n        return [];\r\n    };\r\n    const getOption = list => {\r\n        return list.map(item => (\r\n            <Option key={item.id} value={item.id}>\r\n                {item.name}\r\n            </Option>\r\n        ));\r\n    };\r\n    const selectProvinceItem = item => {\r\n        \r\n        console.log(item)\r\n\r\n        // if (dispatch) {\r\n        //     dispatch({\r\n        //         type: 'accountAndsettings/fetchCity',\r\n        //         payload: item.key\r\n        //     });\r\n        // }\r\n\r\n        // if (onChange) {\r\n        //     onChange({\r\n        //         province: item,\r\n        //         city: nullSelectItem\r\n        //     });\r\n        // }\r\n    };\r\n    const selectCityItem = item => {\r\n        const { value, onChange } = props;\r\n\r\n        // if (value && onChange) {\r\n        //     onChange({\r\n        //         province: value.province,\r\n        //         city: item\r\n        //     });\r\n        // }\r\n    };\r\n\r\n    return (\r\n        <Row>\r\n            <Col xl={24} lg={24} md={24} sm={24} xs={24}>\r\n                <Spin spinning={false} wrapperClassName=\"row\" size=\"small\">\r\n                    <Select\r\n                        className=\"item\"\r\n                        showSearch\r\n                        onSelect={selectProvinceItem}\r\n                        loading={provinces.length !== 0 ? false : true}\r\n                    >\r\n                        {getProvinceOption()}\r\n                    </Select>\r\n                    <Select\r\n                        className=\"item\"\r\n                        showSearch\r\n                        onSelect={selectCityItem}\r\n                    >\r\n                        {getDistrictOption()}\r\n                    </Select>\r\n                </Spin>\r\n            </Col>\r\n        </Row>\r\n    );\r\n});\r\n\r\nexport default GeographicView;\r\n"]},"metadata":{},"sourceType":"module"}