{"ast":null,"code":"var _jsxFileName = \"E:\\\\web_ungdung\\\\frontend\\\\src\\\\views\\\\Home\\\\Components\\\\ListContent\\\\ListContent.js\";\nimport React, { useState } from 'react';\nimport { List, message, Avatar, Spin, Card } from 'antd';\nimport axios from 'axios';\nimport { BASE_URI } from './../../constants/base_url';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport './styles.css';\nexport default function ManyComponent() {\n  const [tracks, setTracks] = useState([]);\n  const [hasMoreItems, setHasMoreItems] = useState(true);\n\n  const loadItems = page => {\n    axios.get(BASE_URI + '/getAllData', {\n      params: {\n        page,\n        page_size: 20\n      }\n    }).then(res => {\n      const items = res.data;\n      setTracks([...tracks, ...items.users]);\n    }).catch(err => {\n      setHasMoreItems(false);\n    });\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"danh sach cac ten user\"), React.createElement(InfiniteScroll, {\n    pageStart: -1,\n    loadMore: loadItems,\n    hasMore: hasMoreItems,\n    loader: React.createElement(Spin, {\n      indicator: React.createElement(Icon, {\n        type: \"loading\",\n        style: {\n          fontSize: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }),\n      key: 0,\n      tip: \"loading...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"tracks\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"ol\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, tracks.map(value => React.createElement(\"li\", {\n    key: value._id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, value.name))))));\n} // export default class InfiniteListExample extends React.Component {\n//   state = {\n//     data: [],\n//     loading: false,\n//     hasMore: true,\n//   };\n//   componentDidMount() {\n//     // this.fetchData(res => {\n//     //   this.setState({\n//     //     data: res.results,\n//     //   });\n//     // });\n//     this.setState({\n//         data: [{\n//             id: '1',\n//             name: 'ao nguyen',\n//             email: 'aonguyen@gmail.com'\n//         }]\n//     });\n//   }\n// //   fetchData = callback => {\n// //     reqwest({\n// //       url: fakeDataUrl,\n// //       type: 'json',\n// //       method: 'get',\n// //       contentType: 'application/json',\n// //       success: res => {\n// //         callback(res);\n// //       },\n// //     });\n// //   };\n//   handleInfiniteOnLoad = () => {\n//     let { data } = this.state;\n//     this.setState({\n//       loading: true,\n//     });\n//     if (data.length > 14) {\n//       message.warning('Infinite List loaded all');\n//       this.setState({\n//         hasMore: false,\n//         loading: false,\n//       });\n//       return;\n//     }\n//     this.fetchData(res => {\n//       data = data.concat(res.results);\n//       this.setState({\n//         data,\n//         loading: false,\n//       });\n//     });\n//   };\n//   render() {\n//     return (\n//       <div className=\"list-content\">\n//         <InfiniteScroll\n//           initialLoad={false}\n//           pageStart={0}\n//           loadMore={this.handleInfiniteOnLoad}\n//           hasMore={!this.state.loading && this.state.hasMore}\n//           useWindow={false}\n//         >\n//           <List\n//             dataSource={this.state.data}\n//             renderItem={item => (\n//               <List.Item key={item.id}>\n//                 <List.Item.Meta\n//                   avatar={\n//                     <Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\n//                   }\n//                   title={<a href=\"https://ant.design\">{item.name}</a>}\n//                   description={item.email}\n//                 />\n//                 <div>Content</div>\n//               </List.Item>\n//             )}\n//           >\n//             {this.state.loading && this.state.hasMore && (\n//               <div className=\"loading-content\">\n//                 <Spin />\n//               </div>\n//             )}\n//           </List>\n//         </InfiniteScroll>\n//       </div>\n//     );\n//   }\n// }","map":{"version":3,"sources":["E:/web_ungdung/frontend/src/views/Home/Components/ListContent/ListContent.js"],"names":["React","useState","List","message","Avatar","Spin","Card","axios","BASE_URI","InfiniteScroll","ManyComponent","tracks","setTracks","hasMoreItems","setHasMoreItems","loadItems","page","get","params","page_size","then","res","items","data","users","catch","err","fontSize","map","value","_id","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,EAAeC,OAAf,EAAwBC,MAAxB,EAAgCC,IAAhC,EAAsCC,IAAtC,QAAkD,MAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,4BAAzB;AAEA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAO,cAAP;AAEA,eAAe,SAASC,aAAT,GAAyB;AACpC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,IAAD,CAAhD;;AAEA,QAAMc,SAAS,GAAGC,IAAI,IAAI;AACtBT,IAAAA,KAAK,CACAU,GADL,CACST,QAAQ,GAAG,aADpB,EACmC;AAC3BU,MAAAA,MAAM,EAAE;AACJF,QAAAA,IADI;AAEJG,QAAAA,SAAS,EAAE;AAFP;AADmB,KADnC,EAOKC,IAPL,CAOUC,GAAG,IAAI;AACT,YAAMC,KAAK,GAAGD,GAAG,CAACE,IAAlB;AACAX,MAAAA,SAAS,CAAC,CAAC,GAAGD,MAAJ,EAAY,GAAGW,KAAK,CAACE,KAArB,CAAD,CAAT;AACH,KAVL,EAWKC,KAXL,CAWWC,GAAG,IAAI;AACVZ,MAAAA,eAAe,CAAC,KAAD,CAAf;AACH,KAbL;AAcH,GAfD;;AAiBA,SACI,0CACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADJ,EAEI,oBAAC,cAAD;AACI,IAAA,SAAS,EAAE,CAAC,CADhB;AAEI,IAAA,QAAQ,EAAEC,SAFd;AAGI,IAAA,OAAO,EAAEF,YAHb;AAII,IAAA,MAAM,EACF,oBAAC,IAAD;AACI,MAAA,SAAS,EACL,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,SAAX;AAAqB,QAAA,KAAK,EAAE;AAAEc,UAAAA,QAAQ,EAAE;AAAZ,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFR;AAII,MAAA,GAAG,EAAE,CAJT;AAKI,MAAA,GAAG,EAAC,YALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAcI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKhB,MAAM,CAACiB,GAAP,CAAWC,KAAK,IACb;AAAI,IAAA,GAAG,EAAEA,KAAK,CAACC,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqBD,KAAK,CAACE,IAA3B,CADH,CADL,CADJ,CAdJ,CAFJ,CADJ;AA2BH,C,CAED;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState } from 'react';\r\nimport { List, message, Avatar, Spin, Card } from 'antd';\r\nimport axios from 'axios';\r\nimport { BASE_URI } from './../../constants/base_url';\r\n\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport './styles.css';\r\n\r\nexport default function ManyComponent() {\r\n    const [tracks, setTracks] = useState([]);\r\n    const [hasMoreItems, setHasMoreItems] = useState(true);\r\n\r\n    const loadItems = page => {\r\n        axios\r\n            .get(BASE_URI + '/getAllData', {\r\n                params: {\r\n                    page,\r\n                    page_size: 20\r\n                }\r\n            })\r\n            .then(res => {\r\n                const items = res.data;\r\n                setTracks([...tracks, ...items.users]);\r\n            })\r\n            .catch(err => {\r\n                setHasMoreItems(false);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h3>danh sach cac ten user</h3>\r\n            <InfiniteScroll\r\n                pageStart={-1}\r\n                loadMore={loadItems}\r\n                hasMore={hasMoreItems}\r\n                loader={\r\n                    <Spin\r\n                        indicator={\r\n                            <Icon type=\"loading\" style={{ fontSize: 20 }} />\r\n                        }\r\n                        key={0}\r\n                        tip=\"loading...\"\r\n                    />\r\n                }\r\n            >\r\n                <div className=\"tracks\">\r\n                    <ol>\r\n                        {tracks.map(value => (\r\n                            <li key={value._id}>{value.name}</li>\r\n                        ))}\r\n                    </ol>\r\n                </div>\r\n            </InfiniteScroll>\r\n        </>\r\n    );\r\n}\r\n\r\n// export default class InfiniteListExample extends React.Component {\r\n//   state = {\r\n//     data: [],\r\n//     loading: false,\r\n//     hasMore: true,\r\n//   };\r\n\r\n//   componentDidMount() {\r\n//     // this.fetchData(res => {\r\n//     //   this.setState({\r\n//     //     data: res.results,\r\n//     //   });\r\n//     // });\r\n//     this.setState({\r\n//         data: [{\r\n//             id: '1',\r\n//             name: 'ao nguyen',\r\n//             email: 'aonguyen@gmail.com'\r\n//         }]\r\n//     });\r\n//   }\r\n\r\n// //   fetchData = callback => {\r\n// //     reqwest({\r\n// //       url: fakeDataUrl,\r\n// //       type: 'json',\r\n// //       method: 'get',\r\n// //       contentType: 'application/json',\r\n// //       success: res => {\r\n// //         callback(res);\r\n// //       },\r\n// //     });\r\n// //   };\r\n\r\n//   handleInfiniteOnLoad = () => {\r\n//     let { data } = this.state;\r\n//     this.setState({\r\n//       loading: true,\r\n//     });\r\n//     if (data.length > 14) {\r\n//       message.warning('Infinite List loaded all');\r\n//       this.setState({\r\n//         hasMore: false,\r\n//         loading: false,\r\n//       });\r\n//       return;\r\n//     }\r\n//     this.fetchData(res => {\r\n//       data = data.concat(res.results);\r\n//       this.setState({\r\n//         data,\r\n//         loading: false,\r\n//       });\r\n//     });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <div className=\"list-content\">\r\n//         <InfiniteScroll\r\n//           initialLoad={false}\r\n//           pageStart={0}\r\n//           loadMore={this.handleInfiniteOnLoad}\r\n//           hasMore={!this.state.loading && this.state.hasMore}\r\n//           useWindow={false}\r\n//         >\r\n//           <List\r\n//             dataSource={this.state.data}\r\n//             renderItem={item => (\r\n//               <List.Item key={item.id}>\r\n//                 <List.Item.Meta\r\n//                   avatar={\r\n//                     <Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\r\n//                   }\r\n//                   title={<a href=\"https://ant.design\">{item.name}</a>}\r\n//                   description={item.email}\r\n//                 />\r\n//                 <div>Content</div>\r\n//               </List.Item>\r\n//             )}\r\n//           >\r\n//             {this.state.loading && this.state.hasMore && (\r\n//               <div className=\"loading-content\">\r\n//                 <Spin />\r\n//               </div>\r\n//             )}\r\n//           </List>\r\n//         </InfiniteScroll>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}