{"ast":null,"code":"var _jsxFileName = \"E:\\\\react-antd\\\\frontend\\\\src\\\\views\\\\Setting\\\\components\\\\FormSettingView\\\\FormSettingView.js\";\nimport React from 'react';\nimport { Form, Input, Row, Col, Select, Button } from 'antd';\nimport GeographicView from './../GeographicView';\nconst {\n  Item\n} = Form;\nconst {\n  TextArea\n} = Input;\nconst {\n  Option\n} = Select;\n\nfunction FormSetting(props) {\n  const {\n    getFieldDecorator\n  } = props.form;\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('sss');\n      }\n    });\n  };\n\n  const prefixSelector = getFieldDecorator('prefix', {\n    initialValue: '84'\n  })(React.createElement(Select, {\n    style: {\n      width: 70\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(Option, {\n    value: \"84\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"+84\")));\n\n  const validate = (rule, value, callback) => {\n    const {\n      form\n    } = props;\n    const {\n      province,\n      district\n    } = value;\n\n    if (value) {\n      form.validateFields(['confirm'], {\n        force: true\n      });\n    }\n\n    if (!province.key) {\n      callback('Please input your province or city!');\n    }\n\n    if (!district.key) {\n      callback('Please input your district!');\n    }\n\n    callback();\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(Col, {\n    xl: 15,\n    lg: 15,\n    md: 15,\n    sm: 24,\n    xs: 24,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(Item, {\n    label: \"Email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, getFieldDecorator('email', {\n    rules: [{\n      required: true,\n      message: 'Please input your email'\n    }, {\n      validator: validate\n    }]\n  })(React.createElement(Input, {\n    placeholder: \"Please input your email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }))), React.createElement(Item, {\n    label: \"Nickname\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, getFieldDecorator('nickname', {\n    rules: [{\n      required: true,\n      message: 'Please input your nickname'\n    }, {\n      validator: validate\n    }]\n  })(React.createElement(Input, {\n    placeholder: \"Please input your nickname\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }))), React.createElement(Item, {\n    label: \"Personal profile\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, getFieldDecorator('personalProfile', {\n    rules: [{\n      validator: validate\n    }]\n  })(React.createElement(TextArea, {\n    rows: 3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }))), React.createElement(Item, {\n    label: \"Phone Number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, getFieldDecorator('phone', {\n    rules: [{\n      required: true,\n      message: 'Please input your phone number!'\n    }, {\n      validator: validate\n    }]\n  })(React.createElement(Input, {\n    type: \"number\",\n    addonBefore: prefixSelector,\n    style: {\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }))), React.createElement(Item, {\n    label: \"Country\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, getFieldDecorator('country', {\n    initialValue: 'Vietnam',\n    rules: [{\n      required: true,\n      message: 'Please input your country!'\n    }]\n  })(React.createElement(Select, {\n    style: {\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(Option, {\n    value: \"Vietnam\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"Vi\\u1EC7t Nam\")))), React.createElement(Item, {\n    label: \"Province or city\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, getFieldDecorator('geographic', {\n    rules: [{\n      required: true,\n      message: 'Please input your province or city'\n    }, {\n      validator: validate\n    }]\n  })(React.createElement(GeographicView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }))), React.createElement(Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, \"Update Information\"))))));\n}\n\nconst FormSettingViews = Form.create({\n  name: 'form-settings-account'\n})(FormSetting);\nexport default FormSettingViews;","map":{"version":3,"sources":["E:/react-antd/frontend/src/views/Setting/components/FormSettingView/FormSettingView.js"],"names":["React","Form","Input","Row","Col","Select","Button","GeographicView","Item","TextArea","Option","FormSetting","props","getFieldDecorator","form","handleSubmit","e","preventDefault","validateFields","err","values","console","log","prefixSelector","initialValue","width","validate","rule","value","callback","province","district","force","key","rules","required","message","validator","FormSettingViews","create","name"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Form, Input, Row, Col, Select, Button } from 'antd';\r\nimport GeographicView from './../GeographicView';\r\nconst { Item } = Form;\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\n\r\nfunction FormSetting(props) {\r\n    const { getFieldDecorator } = props.form;\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        props.form.validateFields((err, values) => {\r\n            if (!err) {   \r\n                console.log('sss')\r\n            }\r\n        });\r\n    };\r\n    const prefixSelector = getFieldDecorator('prefix', {\r\n        initialValue: '84'\r\n    })(\r\n        <Select style={{ width: 70 }}>\r\n            <Option value=\"84\">+84</Option>\r\n        </Select>\r\n    );\r\n    const validate = (rule, value, callback) => {\r\n        const { form } = props;\r\n        const { province, district } = value;\r\n        if (value) {\r\n            form.validateFields(['confirm'], { force: true });\r\n        }\r\n        if (!province.key) {\r\n            callback('Please input your province or city!');\r\n        }\r\n\r\n        if (!district.key) {\r\n            callback('Please input your district!');\r\n        }\r\n\r\n        callback();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col xl={15} lg={15} md={15} sm={24} xs={24}>\r\n                    <Form onSubmit={handleSubmit}>\r\n                        <Item label=\"Email\">\r\n                            {getFieldDecorator('email', {\r\n                                rules: [\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Please input your email'\r\n                                    },\r\n                                    {\r\n                                        validator: validate\r\n                                    }\r\n                                ]\r\n                            })(<Input placeholder=\"Please input your email\" />)}\r\n                        </Item>\r\n                        <Item label=\"Nickname\">\r\n                            {getFieldDecorator('nickname', {\r\n                                rules: [\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Please input your nickname'\r\n                                    },\r\n                                    {\r\n                                        validator: validate\r\n                                    }\r\n                                ]\r\n                            })(\r\n                                <Input placeholder=\"Please input your nickname\" />\r\n                            )}\r\n                        </Item>\r\n                        <Item label=\"Personal profile\">\r\n                            {getFieldDecorator('personalProfile', {\r\n                                rules: [\r\n                                    {\r\n                                        validator: validate\r\n                                    }\r\n                                ]\r\n                            })(\r\n                                <TextArea rows={3} />\r\n                            )}\r\n                        </Item>\r\n                        <Item label=\"Phone Number\">\r\n                            {getFieldDecorator('phone', {\r\n                                rules: [\r\n                                    {\r\n                                        required: true,\r\n                                        message:\r\n                                            'Please input your phone number!'\r\n                                    },\r\n                                    {\r\n                                        validator: validate\r\n                                    }\r\n                                ]\r\n                            })(\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    addonBefore={prefixSelector}\r\n                                    style={{ width: '100%' }}\r\n                                />\r\n                            )}\r\n                        </Item>\r\n                        <Item label=\"Country\">\r\n                            {getFieldDecorator('country', {\r\n                                initialValue: 'Vietnam',\r\n                                rules: [\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Please input your country!'\r\n                                    }\r\n                                ]\r\n                            })(\r\n                                <Select style={{ width: '100%' }}>\r\n                                    <Option value=\"Vietnam\">Việt Nam</Option>\r\n                                </Select>\r\n                            )}\r\n                        </Item>\r\n                        <Item label=\"Province or city\">\r\n                            {getFieldDecorator('geographic', {\r\n                                rules: [\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Please input your province or city'\r\n                                    },\r\n                                    {\r\n                                        validator: validate\r\n                                    }\r\n                                ]\r\n                            })(<GeographicView />)}\r\n                        </Item>\r\n                        <Item>\r\n                            <Button type='primary' htmlType='submit'>Update Information</Button>\r\n                        </Item>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst FormSettingViews = Form.create({ name: 'form-settings-account' })(\r\n    FormSetting\r\n);\r\nexport default FormSettingViews;\r\n"]},"metadata":{},"sourceType":"module"}