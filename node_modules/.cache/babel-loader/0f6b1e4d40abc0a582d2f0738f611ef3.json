{"ast":null,"code":"import \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/alert/style\";\nimport _Alert from \"antd/es/alert\";\nimport \"antd/es/switch/style\";\nimport _Switch from \"antd/es/switch\";\nimport \"antd/es/list/style\";\nimport _List from \"antd/es/list\";\nimport \"antd/es/divider/style\";\nimport _Divider from \"antd/es/divider\";\nimport \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\nimport \"antd/es/drawer/style\";\nimport _Drawer from \"antd/es/drawer\";\nimport \"antd/es/message/style\";\nimport _message from \"antd/es/message\";\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport './index.less';\nimport { createBrowserHistory } from 'history';\nimport { stringify, parse } from 'qs';\nimport React, { useState, useEffect, useRef } from 'react';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport useMergeValue from 'use-merge-value';\nimport omit from 'omit.js';\nimport defaultSettings from '../defaultSettings';\nimport BlockCheckbox from './BlockCheckbox';\nimport ThemeColor from './ThemeColor';\nimport getLocales, { getLanguage } from '../locales';\nimport { isBrowser, genStringToTheme } from '../utils/utils';\nimport LayoutSetting, { renderLayoutSettingItem } from './LayoutChange';\n\nvar Body = function Body(_ref) {\n  var children = _ref.children,\n      title = _ref.title;\n  return React.createElement(\"div\", {\n    style: {\n      marginBottom: 24\n    }\n  }, React.createElement(\"h3\", {\n    className: \"ant-pro-setting-drawer-title\"\n  }, title), children);\n};\n\nvar oldSetting = {};\n\nvar getDifferentSetting = function getDifferentSetting(state) {\n  var stateObj = {};\n  Object.keys(state).forEach(function (key) {\n    if (state[key] !== oldSetting[key] && key !== 'collapse') {\n      stateObj[key] = state[key];\n    }\n  });\n  delete stateObj.menu;\n  return stateObj;\n};\n\nexport var getFormatMessage = function getFormatMessage() {\n  var formatMessage = function formatMessage(_ref2) {\n    var id = _ref2.id,\n        defaultMessage = _ref2.defaultMessage;\n    var locales = getLocales();\n\n    if (locales[id]) {\n      return locales[id];\n    }\n\n    if (defaultMessage) {\n      return defaultMessage;\n    }\n\n    return id;\n  };\n\n  return formatMessage;\n};\n\nvar updateTheme = function updateTheme(dark, color) {\n  var hideMessageLoading = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var publicPath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '/theme'; // ssr\n\n  if (typeof window === 'undefined' || !window.umi_plugin_ant_themeVar) {\n    return;\n  }\n\n  var formatMessage = getFormatMessage();\n\n  var hide = function hide() {\n    return null;\n  };\n\n  if (!hideMessageLoading) {\n    hide = _message.loading(formatMessage({\n      id: 'app.setting.loading',\n      defaultMessage: '正在加载主题'\n    }));\n  }\n\n  var href = dark ? \"\".concat(publicPath, \"/dark\") : \"\".concat(publicPath, \"/\"); // 如果是 dark，并且是 color=daybreak，无需进行拼接\n\n  var colorFileName = dark && color ? \"-\".concat(encodeURIComponent(color)) : encodeURIComponent(color || '');\n\n  if (color === 'daybreak' && dark) {\n    colorFileName = '';\n  }\n\n  var dom = document.getElementById('theme-style'); // 如果这两个都是空\n\n  if (!href && !colorFileName) {\n    if (dom) {\n      dom.remove();\n      localStorage.removeItem('site-theme');\n    }\n\n    return;\n  }\n\n  var url = \"\".concat(href).concat(colorFileName || '', \".css\");\n\n  if (dom) {\n    dom.onload = function () {\n      window.setTimeout(function () {\n        hide();\n      });\n    };\n\n    dom.href = url;\n  } else {\n    var style = document.createElement('link');\n    style.type = 'text/css';\n    style.rel = 'stylesheet';\n    style.id = 'theme-style';\n\n    style.onload = function () {\n      window.setTimeout(function () {\n        hide();\n      });\n    };\n\n    style.href = url;\n\n    if (document.body.append) {\n      document.body.append(style);\n    } else {\n      document.body.appendChild(style);\n    }\n  }\n\n  localStorage.setItem('site-theme', dark ? 'dark' : 'light');\n};\n\nvar getThemeList = function getThemeList() {\n  var formatMessage = getFormatMessage();\n  var list = window.umi_plugin_ant_themeVar || [];\n  var themeList = [{\n    key: 'light',\n    url: 'https://gw.alipayobjects.com/zos/antfincdn/NQ%24zoisaD2/jpRkZQMyYRryryPNtyIC.svg',\n    title: formatMessage({\n      id: 'app.setting.pagestyle.light'\n    })\n  }, {\n    key: 'dark',\n    url: 'https://gw.alipayobjects.com/zos/antfincdn/XwFOFbLkSM/LCkqqYNmvBEbokSDscrm.svg',\n    title: formatMessage({\n      id: 'app.setting.pagestyle.dark',\n      defaultMessage: ''\n    })\n  }];\n  var darkColorList = [{\n    key: 'daybreak',\n    color: '#1890ff',\n    theme: 'dark'\n  }];\n  var lightColorList = [{\n    key: 'daybreak',\n    color: '#1890ff',\n    theme: 'dark'\n  }];\n\n  if (list.find(function (item) {\n    return item.theme === 'dark';\n  })) {\n    themeList.push({\n      key: 'realDark',\n      url: 'https://gw.alipayobjects.com/zos/antfincdn/hmKaLQvmY2/LCkqqYNmvBEbokSDscrm.svg',\n      title: formatMessage({\n        id: 'app.setting.pagestyle.dark',\n        defaultMessage: ''\n      })\n    });\n  } // insert  theme color List\n\n\n  list.forEach(function (item) {\n    var color = (item.modifyVars || {})['@primary-color'];\n\n    if (item.theme === 'dark' && color) {\n      darkColorList.push(Object.assign({\n        color: color\n      }, item));\n    }\n\n    if (!item.theme || item.theme === 'light') {\n      lightColorList.push(Object.assign({\n        color: color\n      }, item));\n    }\n  });\n  return {\n    colorList: {\n      dark: darkColorList,\n      light: lightColorList\n    },\n    themeList: themeList\n  };\n};\n/**\n * 初始化的时候需要做的工作\n * @param param0\n */\n\n\nvar initState = function initState(settings, onSettingChange, publicPath) {\n  if (!isBrowser()) {\n    return;\n  }\n\n  var loadedStyle = false;\n\n  if (window.location.search) {\n    var params = parse(window.location.search.replace('?', ''));\n    var replaceSetting = {};\n    Object.keys(params).forEach(function (key) {\n      if (defaultSettings[key]) {\n        replaceSetting[key] = params[key];\n      }\n    });\n\n    if (onSettingChange) {\n      onSettingChange(Object.assign(Object.assign({}, settings), replaceSetting));\n    } // 如果 url 中设置主题，进行一次加载。\n\n\n    if (oldSetting.navTheme !== params.navTheme && params.navTheme) {\n      updateTheme(settings.navTheme === 'realDark', params.primaryColor, true, publicPath);\n      loadedStyle = true;\n    }\n  }\n\n  if (loadedStyle) {\n    return;\n  } // 如果 url 中没有设置主题，并且 url 中的没有加载，进行一次加载。\n\n\n  if (defaultSettings.navTheme !== settings.navTheme && settings.navTheme) {\n    updateTheme(settings.navTheme === 'realDark', settings.primaryColor, true, publicPath);\n  }\n};\n\nvar getParamsFromUrl = function getParamsFromUrl(settings) {\n  if (!isBrowser()) {\n    return defaultSettings;\n  } // 第一次进入与 浏览器参数同步一下\n\n\n  var params = {};\n\n  if (window.location.search) {\n    params = parse(window.location.search.replace('?', ''));\n  }\n\n  return Object.assign(Object.assign(Object.assign({}, defaultSettings), settings), params);\n};\n\nvar genCopySettingJson = function genCopySettingJson(settingState) {\n  return JSON.stringify(omit(Object.assign(Object.assign({}, settingState), {\n    primaryColor: genStringToTheme(settingState.primaryColor)\n  }), ['colorWeak']), null, 2);\n};\n/**\n * 可视化配置组件\n * @param props\n */\n\n\nvar SettingDrawer = function SettingDrawer(props) {\n  var _props$settings = props.settings,\n      propsSettings = _props$settings === void 0 ? {} : _props$settings,\n      _props$hideLoading = props.hideLoading,\n      hideLoading = _props$hideLoading === void 0 ? false : _props$hideLoading,\n      hideColors = props.hideColors,\n      hideHintAlert = props.hideHintAlert,\n      hideCopyButton = props.hideCopyButton,\n      getContainer = props.getContainer,\n      onSettingChange = props.onSettingChange;\n  var firstRender = useRef(true);\n\n  var _useMergeValue = useMergeValue(false, {\n    value: props.collapse,\n    onChange: props.onCollapseChange\n  }),\n      _useMergeValue2 = _slicedToArray(_useMergeValue, 2),\n      show = _useMergeValue2[0],\n      setShow = _useMergeValue2[1];\n\n  var _useState = useState(getLanguage()),\n      _useState2 = _slicedToArray(_useState, 2),\n      language = _useState2[0],\n      setLanguage = _useState2[1];\n\n  var _useMergeValue3 = useMergeValue(function () {\n    return getParamsFromUrl(propsSettings);\n  }, {\n    value: propsSettings,\n    onChange: onSettingChange\n  }),\n      _useMergeValue4 = _slicedToArray(_useMergeValue3, 2),\n      settingState = _useMergeValue4[0],\n      setSettingState = _useMergeValue4[1];\n\n  var _ref3 = settingState || {},\n      _ref3$navTheme = _ref3.navTheme,\n      navTheme = _ref3$navTheme === void 0 ? 'dark' : _ref3$navTheme,\n      _ref3$primaryColor = _ref3.primaryColor,\n      primaryColor = _ref3$primaryColor === void 0 ? 'daybreak' : _ref3$primaryColor,\n      _ref3$layout = _ref3.layout,\n      layout = _ref3$layout === void 0 ? 'sidemenu' : _ref3$layout,\n      colorWeak = _ref3.colorWeak;\n\n  useEffect(function () {\n    // 语言修改，这个是和 locale 是配置起来的\n    var onLanguageChange = function onLanguageChange() {\n      if (language !== getLanguage()) {\n        setLanguage(getLanguage());\n      }\n    }; // 记住默认的选择，方便做 diff，然后保存到 url 参数中\n\n\n    oldSetting = Object.assign(Object.assign({}, defaultSettings), propsSettings);\n    /**\n     * 如果不是浏览器 都没有必要做了\n     */\n\n    if (!isBrowser()) {\n      return function () {\n        return null;\n      };\n    }\n\n    initState(settingState, setSettingState, props.publicPath);\n    window.addEventListener('languagechange', onLanguageChange, {\n      passive: true\n    });\n    return function () {\n      return window.removeEventListener('languagechange', onLanguageChange);\n    };\n  }, []);\n  /**\n   * 修改设置\n   * @param key\n   * @param value\n   * @param hideMessageLoading\n   */\n\n  var changeSetting = function changeSetting(key, value, hideMessageLoading) {\n    var nextState = Object.assign({}, settingState);\n    nextState[key] = value;\n\n    if (key === 'navTheme') {\n      updateTheme(value === 'realDark', undefined, hideMessageLoading, props.publicPath);\n      nextState.primaryColor = 'daybreak';\n    }\n\n    if (key === 'primaryColor') {\n      updateTheme(nextState.navTheme === 'realDark', value === 'daybreak' ? '' : value, hideMessageLoading, props.publicPath);\n    }\n\n    if (key === 'layout') {\n      nextState.contentWidth = value === 'topmenu' ? 'Fixed' : 'Fluid';\n    }\n\n    setSettingState(nextState);\n  };\n\n  var formatMessage = getFormatMessage();\n  var themeList = getThemeList();\n  useEffect(function () {\n    /**\n     * 如果不是浏览器 都没有必要做了\n     */\n    if (!isBrowser()) {\n      return;\n    }\n\n    if (firstRender.current) {\n      firstRender.current = false;\n      return;\n    }\n\n    var browserHistory = createBrowserHistory();\n    var params = {};\n\n    if (window.location.search) {\n      params = parse(window.location.search.replace('?', ''));\n    }\n\n    var diffParams = getDifferentSetting(Object.assign(Object.assign({}, params), settingState));\n\n    if (Object.keys(settingState).length < 1) {\n      return;\n    }\n\n    browserHistory.replace({\n      search: stringify(diffParams)\n    });\n  }, [JSON.stringify(settingState)]);\n  return React.createElement(_Drawer, {\n    visible: show,\n    width: 300,\n    onClose: function onClose() {\n      return setShow(false);\n    },\n    placement: \"right\",\n    getContainer: getContainer,\n    handler: React.createElement(\"div\", {\n      className: \"ant-pro-setting-drawer-handle\",\n      onClick: function onClick() {\n        return setShow(!show);\n      }\n    }, React.createElement(_Icon, {\n      type: show ? 'close' : 'setting',\n      style: {\n        color: '#fff',\n        fontSize: 20\n      }\n    })),\n    style: {\n      zIndex: 999\n    }\n  }, React.createElement(\"div\", {\n    className: \"ant-pro-setting-drawer-content\"\n  }, React.createElement(Body, {\n    title: formatMessage({\n      id: 'app.setting.pagestyle',\n      defaultMessage: 'Page style setting'\n    })\n  }, React.createElement(BlockCheckbox, {\n    list: themeList.themeList,\n    value: navTheme,\n    onChange: function onChange(value) {\n      return changeSetting('navTheme', value, hideLoading);\n    }\n  })), React.createElement(ThemeColor, {\n    title: formatMessage({\n      id: 'app.setting.themecolor'\n    }),\n    value: primaryColor,\n    colors: hideColors ? [] : themeList.colorList[navTheme === 'realDark' ? 'dark' : 'light'],\n    formatMessage: formatMessage,\n    onChange: function onChange(color) {\n      return changeSetting('primaryColor', color, hideLoading);\n    }\n  }), React.createElement(_Divider, null), React.createElement(Body, {\n    title: formatMessage({\n      id: 'app.setting.navigationmode'\n    })\n  }, React.createElement(BlockCheckbox, {\n    value: layout,\n    onChange: function onChange(value) {\n      return changeSetting('layout', value, hideLoading);\n    }\n  })), React.createElement(LayoutSetting, {\n    settings: settingState,\n    changeSetting: changeSetting\n  }), React.createElement(_Divider, null), React.createElement(Body, {\n    title: formatMessage({\n      id: 'app.setting.othersettings'\n    })\n  }, React.createElement(_List, {\n    split: false,\n    renderItem: renderLayoutSettingItem,\n    dataSource: [{\n      title: formatMessage({\n        id: 'app.setting.weakmode'\n      }),\n      action: React.createElement(_Switch, {\n        size: \"small\",\n        checked: !!colorWeak,\n        onChange: function onChange(checked) {\n          return changeSetting('colorWeak', checked);\n        }\n      })\n    }]\n  })), hideHintAlert && hideCopyButton ? null : React.createElement(_Divider, null), hideHintAlert ? null : React.createElement(_Alert, {\n    type: \"warning\",\n    message: formatMessage({\n      id: 'app.setting.production.hint'\n    }),\n    icon: React.createElement(_Icon, {\n      type: \"notification\"\n    }),\n    showIcon: true,\n    style: {\n      marginBottom: 16\n    }\n  }), hideCopyButton ? null : React.createElement(CopyToClipboard, {\n    text: genCopySettingJson(settingState),\n    onCopy: function onCopy() {\n      return _message.success(formatMessage({\n        id: 'app.setting.copyinfo'\n      }));\n    }\n  }, React.createElement(_Button, {\n    block: true,\n    icon: \"copy\"\n  }, formatMessage({\n    id: 'app.setting.copy'\n  })))));\n};\n\nexport default SettingDrawer;","map":null,"metadata":{},"sourceType":"module"}