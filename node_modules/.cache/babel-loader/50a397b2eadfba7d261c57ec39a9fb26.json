{"ast":null,"code":"\"use strict\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* eslint-disable no-undef, prefer-rest-params */\n\n\nvar ReactIntl = require('react-intl');\n\nvar createContext = require('@ant-design/create-react-context');\n\nvar localeContext;\n\nfunction setLocale(lang) {\n  var realReload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var _window = window,\n      _window$g_langSeparat = _window.g_langSeparator,\n      g_langSeparator = _window$g_langSeparat === void 0 ? '-' : _window$g_langSeparat;\n  var localeExp = new RegExp(\"^([a-z]{2})\".concat(g_langSeparator, \"?([A-Z]{2})?$\"));\n\n  if (lang !== undefined && !localeExp.test(lang)) {\n    // for reset when lang === undefined\n    throw new Error('setLocale lang format error');\n  }\n\n  if (getLocale() !== lang) {\n    window.g_lang = lang;\n    window.localStorage.setItem('umi_locale', lang || ''); // 触发 context 的 reload\n    // 如果要刷新 location ，没必要进行 context 的 reload 了\n\n    if (localeContext && !realReload) {\n      localeContext.reloadAppLocale();\n    }\n\n    if (realReload) {\n      window.location.reload();\n    } // chrome 不支持这个事件。所以人肉触发一下\n\n\n    if (window.dispatchEvent) {\n      var event = new Event('languagechange');\n      window.dispatchEvent(event);\n    }\n  }\n}\n\nfunction getLocale() {\n  // support SSR\n  var _window2 = window,\n      _window2$g_langSepara = _window2.g_langSeparator,\n      g_langSeparator = _window2$g_langSepara === void 0 ? '-' : _window2$g_langSepara,\n      g_lang = _window2.g_lang;\n  var lang = typeof localStorage !== 'undefined' ? window.localStorage.getItem('umi_locale') : '';\n  var isNavigatorLanguageValid = typeof navigator !== 'undefined' && typeof navigator.language === 'string';\n  var browserLang = isNavigatorLanguageValid ? navigator.language.split('-').join(g_langSeparator) : '';\n  return lang || g_lang || browserLang;\n}\n\nvar LangContext = createContext({\n  lang: getLocale()\n}); // init api methods\n\nvar intl;\nvar intlApi = {};\n['formatMessage', 'formatHTMLMessage', 'formatDate', 'formatTime', 'formatRelative', 'formatNumber', 'formatPlural', 'LangContext', 'now', 'onError'].forEach(function (methodName) {\n  intlApi[methodName] = function () {\n    if (intl && intl[methodName]) {\n      var _intl$methodName; // _setIntlObject has been called\n\n\n      return (_intl$methodName = intl[methodName]).call.apply(_intl$methodName, [intl].concat(Array.prototype.slice.call(arguments)));\n    } else if (console && console.warn) {\n      console.warn(\"[umi-plugin-locale] \".concat(methodName, \" not initialized yet, you should use it after react app mounted.\"));\n    }\n\n    return null;\n  };\n}); // react-intl 没有直接暴露 formatMessage 这个方法\n// 只能注入到 props 中，所以通过在最外层包一个组件然后组件内调用这个方法来把 intl 这个对象暴露到这里来\n// TODO 查找有没有更好的办法\n\nfunction _setIntlObject(theIntl) {\n  // umi 系统 API，不对外暴露\n  intl = theIntl;\n}\n/**\n * 用于触发 context 的重新渲染 方法。可以实现不刷新进行切换语言\n * @param {*} context\n */\n\n\nfunction _setLocaleContext(context) {\n  localeContext = context;\n}\n\nmodule.exports = _objectSpread({}, ReactIntl, {}, intlApi, {\n  setLocale: setLocale,\n  getLocale: getLocale,\n  _setIntlObject: _setIntlObject,\n  LangContext: LangContext,\n  _setLocaleContext: _setLocaleContext\n});","map":null,"metadata":{},"sourceType":"script"}