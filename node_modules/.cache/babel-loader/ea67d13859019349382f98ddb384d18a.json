{"ast":null,"code":"import \"antd/es/tooltip/style\";\nimport _Tooltip from \"antd/es/tooltip\";\nimport \"antd/es/icon/style\";\nimport _Icon from \"antd/es/icon\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport './ThemeColor.less';\nimport React from 'react';\nimport { genThemeToString } from '../utils/utils';\n\nvar Tag = function Tag(_a) {\n  var color = _a.color,\n      check = _a.check,\n      rest = __rest(_a, [\"color\", \"check\"]);\n\n  return React.createElement(\"div\", Object.assign({}, rest, {\n    style: {\n      backgroundColor: color\n    }\n  }), check ? React.createElement(_Icon, {\n    type: \"check\"\n  }) : '');\n};\n\nvar ThemeColor = function ThemeColor(_ref) {\n  var colors = _ref.colors,\n      title = _ref.title,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      formatMessage = _ref.formatMessage;\n  var colorList = colors || [];\n\n  if (colorList.length < 1) {\n    return null;\n  }\n\n  return React.createElement(\"div\", {\n    className: \"theme-color\"\n  }, React.createElement(\"h3\", {\n    className: \"theme-color-title\"\n  }, title), React.createElement(\"div\", {\n    className: \"theme-color-content\"\n  }, colorList.map(function (_ref2) {\n    var key = _ref2.key,\n        color = _ref2.color;\n    var themeKey = genThemeToString(key);\n    return React.createElement(_Tooltip, {\n      key: color,\n      title: themeKey ? formatMessage({\n        id: \"app.setting.themecolor.\".concat(themeKey)\n      }) : key\n    }, React.createElement(Tag, {\n      className: \"theme-color-block\",\n      color: color,\n      check: value === key || genThemeToString(value) === key,\n      onClick: function onClick() {\n        return onChange && onChange(key);\n      }\n    }));\n  })));\n};\n\nexport default ThemeColor;","map":null,"metadata":{},"sourceType":"module"}